[{"/home/minhtan/Documents/robotservices/src/index.js":"1","/home/minhtan/Documents/robotservices/src/reportWebVitals.js":"2","/home/minhtan/Documents/robotservices/src/App.js":"3","/home/minhtan/Documents/robotservices/src/components/Header.jsx":"4","/home/minhtan/Documents/robotservices/src/components/Body.jsx":"5","/home/minhtan/Documents/robotservices/src/components/Home.jsx":"6","/home/minhtan/Documents/robotservices/src/components/TestDataBase.jsx":"7","/home/minhtan/Documents/robotservices/src/components/About.jsx":"8","/home/minhtan/Documents/robotservices/src/components/Order.jsx":"9","/home/minhtan/Documents/robotservices/src/components/Drink.jsx":"10","/home/minhtan/Documents/robotservices/src/components/Connection.jsx":"11","/home/minhtan/Documents/robotservices/src/components/RobotState.jsx":"12","/home/minhtan/Documents/robotservices/src/components/Map.jsx":"13","/home/minhtan/Documents/robotservices/src/components/Teleoperation.jsx":"14","/home/minhtan/Documents/robotservices/src/components/SetGoal_1.jsx":"15","/home/minhtan/Documents/robotservices/src/components/SetGoal_2.jsx":"16","/home/minhtan/Documents/robotservices/src/components/HomeNavbar.jsx":"17","/home/minhtan/Documents/robotservices/src/components/ViewOrder.jsx":"18","/home/minhtan/Documents/robotservices/src/scripts/config.js":"19","/home/minhtan/Documents/robotservices/src/components/OrderDetail.jsx":"20","/home/minhtan/Documents/robotservices/src/components/OrderSuccess.jsx":"21","/home/minhtan/Documents/robotservices/src/components/CurrentOrder.jsx":"22","/home/minhtan/Documents/robotservices/src/components/SetGoal_3.jsx":"23","/home/minhtan/Documents/robotservices/src/components/SetGoal_4.jsx":"24","/home/minhtan/Documents/robotservices/src/components/SetGoal_5.jsx":"25"},{"size":660,"mtime":1687185290000,"results":"26","hashOfConfig":"27"},{"size":362,"mtime":1687020422000,"results":"28","hashOfConfig":"27"},{"size":212,"mtime":1687280864000,"results":"29","hashOfConfig":"27"},{"size":813,"mtime":1687591994317,"results":"30","hashOfConfig":"27"},{"size":990,"mtime":1687594065730,"results":"31","hashOfConfig":"27"},{"size":3531,"mtime":1687709034240,"results":"32","hashOfConfig":"27"},{"size":997,"mtime":1687596047698,"results":"33","hashOfConfig":"27"},{"size":324,"mtime":1687020422000,"results":"34","hashOfConfig":"27"},{"size":7072,"mtime":1687626473607,"results":"35","hashOfConfig":"27"},{"size":1451,"mtime":1687595278106,"results":"36","hashOfConfig":"27"},{"size":1899,"mtime":1687708802066,"results":"37","hashOfConfig":"27"},{"size":4186,"mtime":1687716800252,"results":"38","hashOfConfig":"27"},{"size":1561,"mtime":1687707265218,"results":"39","hashOfConfig":"27"},{"size":3149,"mtime":1687678413804,"results":"40","hashOfConfig":"27"},{"size":2749,"mtime":1687709803319,"results":"41","hashOfConfig":"27"},{"size":2680,"mtime":1687716636854,"results":"42","hashOfConfig":"27"},{"size":764,"mtime":1687708940011,"results":"43","hashOfConfig":"27"},{"size":2436,"mtime":1687684044527,"results":"44","hashOfConfig":"27"},{"size":304,"mtime":1687700853930,"results":"45","hashOfConfig":"27"},{"size":1862,"mtime":1687685359920,"results":"46","hashOfConfig":"27"},{"size":617,"mtime":1687591819691,"results":"47","hashOfConfig":"27"},{"size":3728,"mtime":1687708595884,"results":"48","hashOfConfig":"27"},{"size":2635,"mtime":1687716639390,"results":"49","hashOfConfig":"27"},{"size":2732,"mtime":1687708781554,"results":"50","hashOfConfig":"27"},{"size":2732,"mtime":1687708787154,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"wg1h7d",{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"54"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"54"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"54"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"54"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"54"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"54"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"54"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"54"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"54"},"/home/minhtan/Documents/robotservices/src/index.js",[],["114","115"],"/home/minhtan/Documents/robotservices/src/reportWebVitals.js",[],"/home/minhtan/Documents/robotservices/src/App.js",[],"/home/minhtan/Documents/robotservices/src/components/Header.jsx",["116","117","118"],"import React, { Component } from \"react\";\nimport { Container, Navbar, Nav } from \"react-bootstrap\";\nclass Header extends Component {\n  render() {\n    return (\n      // <Container>\n      //   <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" collapseOnSelect>\n      //     <Navbar.Brand href=\"#home\">React ROS Robot</Navbar.Brand>\n      //     <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      //     <Navbar.Collapse id=\"basic-navbar-nav\">\n      //       <Nav className=\"mr-auto\">\n      //         <Nav.Link href=\"/\">Home</Nav.Link>\n      //         <Nav.Link href=\"/about\">About</Nav.Link>\n      //         <Nav.Link href=\"/testDataBase\">Database</Nav.Link>\n      //       </Nav>\n      //     </Navbar.Collapse>\n      //   </Navbar>\n      // </Container>\n      <div></div>\n    );\n  }\n}\n\nexport default Header;\n","/home/minhtan/Documents/robotservices/src/components/Body.jsx",[],"/home/minhtan/Documents/robotservices/src/components/Home.jsx",["119","120","121","122","123","124","125"],"import React, { Component } from \"react\";\nimport Connection from \"./Connection\";\nimport RobotState from \"./RobotState\";\nimport Teleoperation from \"./Teleoperation\";\nimport Map from \"./Map\";\nimport SetGoal_1 from \"./SetGoal_1\";\nimport SetGoal_2 from \"./SetGoal_2\";\nimport SetGoal_3 from \"./SetGoal_3\";\nimport SetGoal_4 from \"./SetGoal_4\";\nimport SetGoal_5 from \"./SetGoal_5\";\n\nimport HomeNavbar from \"./HomeNavbar\";\nimport ViewOrder from \"./ViewOrder\";\nimport CurrentOrder from \"./CurrentOrder\";\n\nimport { Row, Col, Container, Card } from \"react-bootstrap\";\nimport { ToastContainer, toast } from \"react-toastify\";\n\nclass Home extends Component {\n  componentDidMount() {\n    const server = new WebSocket('wss://localhost:3000')\n    // server.addEventListener(\"open\", (event) => {\n    //   console.log('WEBSOCKET OPENED')\n    // })\n    server.onopen = (event) => {\n      console.log(\"WS EVENT EMIT\")\n    }\n\n    server.onmessage = (message) => {\n      console.log(\"NEW MESSAGE\", message)\n    }\n\n    const channel = new BroadcastChannel(\"6B29FC40-CA47-1067-B31D-00DD010662DA\");\n\n    const handleMessage = (event) => {\n      toast.success(\"NEW ORDER FROM CLIENT! REFRESH IF YOU WANNA DELIVER THIS\", {\n        position: toast.POSITION.TOP_RIGHT,\n      });\n    };\n\n    channel.addEventListener(\"message\", handleMessage);\n\n    this.channel = channel;\n  }\n\n  componentWillUnmount() {\n    if (this.channel) {\n      this.channel.removeEventListener(\"message\", this.handleMessage);\n    }\n  }\n\n  render() {\n    const cusStyle = {\n      position: \"relative\",\n      float: \"right\"\n    }\n    return (\n      <div>\n        <HomeNavbar />\n        <Container>\n          <Row>\n            <Col>\n              <div className=\"text-center\"\n                style={\n                  {\n                    marginTop: \"8%\"\n                  }\n                }>\n                <h4>\n                  ROBOT CONTROLS\n                </h4>\n              </div>\n              <Row style={{ marginTop: \"5%\" }}>\n                <Col>\n                  <SetGoal_2 />\n                </Col>\n                <Col>\n                  <SetGoal_3 />\n                </Col>\n                <Col>\n                  <SetGoal_4 />\n                </Col>\n                <Col>\n                  <SetGoal_5 />\n                </Col>\n              </Row>\n              <Row>\n                <Col>\n                  <SetGoal_1 />\n                </Col>\n                <Col>\n                  <Connection />\n                </Col>\n              </Row>\n            </Col>\n            <Col>\n              <div className=\"text-center\"\n                style={\n                  {\n                    marginTop: \"8%\"\n                  }\n                }>\n                <h4>\n                  CURRENTLY ORDER\n                </h4>\n              </div>\n              <Row>\n                <div style={cusStyle}>\n                  <CurrentOrder />\n                </div>\n              </Row>\n            </Col>\n          </Row>\n\n          <Row>\n            <Col sm={4}>\n              <Row>\n                <RobotState />\n              </Row>\n              <Row>\n                <div style={{ top: \"30%\", position: \"relative\", left: \"5%\" }}>\n                  <h4>CONTROL</h4>\n                  <Teleoperation />\n                </div>\n              </Row>\n            </Col>\n            <Col sm={8}>\n              <h4>MAP</h4>\n              <Map />\n            </Col>\n          </Row>\n          <ToastContainer />\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","/home/minhtan/Documents/robotservices/src/components/TestDataBase.jsx",[],"/home/minhtan/Documents/robotservices/src/components/About.jsx",[],"/home/minhtan/Documents/robotservices/src/components/Order.jsx",["126"],"import React, { useEffect, useState } from \"react\";\nimport { Row, Col, Container, Button, Form, Table } from \"react-bootstrap\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport axios from \"axios\";\n\nimport { useHistory } from \"react-router-dom\";\n\nconst Order = () => {\n  const client = new WebSocket(\"ws://localhost:3000\")\n  const history = useHistory();\n  const defaultOrder = {\n    Date: new Date().toLocaleDateString(\"en-GB\"),\n    StaffID: \"Staff-01\",\n    OrderList: [],\n    Note: \"\",\n    Total: 0,\n  };\n  const [order, setOrder] = useState(defaultOrder);\n  const defaultOrderDetail = { Drink: null, Price: 0, Qty: \"\" };\n  const [orderDetails, setOrderDetails] = useState([defaultOrderDetail]);\n  const [drinks, setDrinks] = useState([]);\n\n  useEffect(() => {\n    fetchDrinks();\n  }, []);\n\n  useEffect(() => {\n    calculateTotalPrice();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [orderDetails]);\n\n  const btnAddRow_onclick = () => {\n    setOrderDetails([...orderDetails, defaultOrderDetail]);\n  };\n\n  const fetchDrinks = async () => {\n    try {\n      const response = await axios.get(\"https://db-api-5yux.onrender.com/drink\");\n      const data = response.data;\n      setDrinks(data);\n    } catch (error) {\n      console.log(\"Error fetching drinks:\", error);\n    }\n  };\n\n  const calculateTotalPrice = () => {\n    let total = 0;\n    orderDetails.forEach((detail) => {\n      const price = parseInt(detail.Price, 10);\n      const qty = parseInt(detail.Qty, 10);\n      total += price * qty;\n    });\n\n    if (isNaN(total)) total = 0;\n\n    setOrder({ ...order, Total: total });\n  };\n\n  const handleDrinkChange = (event, index) => {\n    const value = event.target.value;\n\n    const drink = drinks.find((d) => d._id === value);\n\n    const updatedOrderDetails = [...orderDetails];\n    updatedOrderDetails[index] = {\n      ...updatedOrderDetails[index],\n      Drink: value,\n      Price: drink ? drink.DrinkPrice : 0,\n    };\n    setOrderDetails(updatedOrderDetails);\n  };\n\n  const handleQtyChange = (event, index) => {\n    const { value } = event.target;\n    const numericValue = value.replace(/[^0-9]/g, \"\"); // Filter out non-numeric characters\n    const updatedOrderDetails = [...orderDetails];\n    updatedOrderDetails[index].Qty = numericValue;\n    setOrderDetails(updatedOrderDetails);\n  };\n\n  const handleNotesChange = (event) => {\n    const { value } = event.target;\n    setOrder({ ...order, Note: value });\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n      try {\n      // Create order details\n      const detailIds = [];\n\n      for (const detail of orderDetails) {\n        if (detail.Drink && detail.Price && detail.Qty) {\n          const orderDetailsResponse = await axios.post(\n            \"https://db-api-5yux.onrender.com/orderDetail\",\n            detail\n          );\n\n          detailIds.push(orderDetailsResponse.data._id);\n          console.log(\n            \"New order detail created:\",\n            orderDetailsResponse.statusText\n          );\n        }\n      }\n\n      // Create order\n      const updatedOrder = { ...order, OrderList: detailIds };\n      const orderResponse = await axios.post(\n        \"https://db-api-5yux.onrender.com/order\",\n        updatedOrder\n      );\n\n      // Navigation and toast\n      if (orderResponse.status === 201) {\n        const channel = new BroadcastChannel(\"6B29FC40-CA47-1067-B31D-00DD010662DA\");\n        channel.postMessage(\"Tạo Order thành công!\");\n        client.onopen = () => client.send(\"NEW ORDER FROM CLIENT\")\n        history.push('/orderSuccess')\n      } else {\n        console.log(orderResponse.status);\n      }\n    } catch (error) {\n      console.log(\"Error creating new order and order details:\", error);\n    }\n  };\n\n  return (\n    <div>\n      <Form>\n        <Container>\n          <Row className=\"justify-content-md-center\">\n            <Col md={10}>\n              <Form.Group>\n                <Table striped borderless hover responsive size=\"sm\">\n                  <thead>\n                    <tr>\n                      <th className=\"text-center\">#</th>\n                      <th className=\"text-center\">Thức uống</th>\n                      <th className=\"text-center\">Đơn giá</th>\n                      <th className=\"text-center\">Số lượng</th>\n                    </tr>\n                  </thead>\n                  <tbody id=\"orderDetails_table\">\n                    {orderDetails.map((detail, index) => (\n                      <tr key={index}>\n                        <td className=\"d-flex center text-center\">\n                          <h5 className=\"stt\">{index + 1}</h5>\n                        </td>\n                        <td>\n                          <select\n                            className=\"table-select\"\n                            onChange={(event) =>\n                              handleDrinkChange(event, index)\n                            }\n                          >\n                            <option key={0} value={0}>\n                              Chọn món\n                            </option>\n                            {drinks.map((drink, index) => (\n                              <option key={index + 1} value={drink._id}>\n                                {drink.DrinkName}\n                              </option>\n                            ))}\n                          </select>\n                        </td>\n                        <td>\n                          <Form.Control\n                            type=\"text\"\n                            value={detail.Price}\n                            readOnly\n                          ></Form.Control>\n                        </td>\n                        <td>\n                          <Form.Control\n                            type=\"text\"\n                            value={detail.Qty}\n                            onChange={(event) => handleQtyChange(event, index)}\n                          ></Form.Control>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </Table>\n                <h5>Total: {order.Total} Đ</h5>\n              </Form.Group>\n              <Form.Group>\n                <Button type=\"button\" onClick={btnAddRow_onclick}>\n                  <span>+</span> Thêm món\n                </Button>\n              </Form.Group>\n              <Form.Group>\n                <Form.Label>Ghi chú</Form.Label>\n                <Form.Control\n                  as=\"textarea\"\n                  value={order.Note}\n                  rows={3}\n                  onChange={(event) => handleNotesChange(event)}\n                />\n              </Form.Group>\n              <Form.Group className=\"d-flex justify-content-center\">\n                <Button type=\"submit\" onClick={(event) => handleSubmit(event)}>\n                  Đặt món\n                </Button>\n              </Form.Group>\n            </Col>\n          </Row>\n        </Container>\n      </Form>\n      <ToastContainer/>\n    </div>\n  );\n};\n\nexport default Order;\n","/home/minhtan/Documents/robotservices/src/components/Drink.jsx",[],"/home/minhtan/Documents/robotservices/src/components/Connection.jsx",["127"],"import React, { Component } from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Config from \"../scripts/config\";\nclass Connection extends Component {\n  state = { connected: false, ros: null };\n\n  constructor() {\n    super();\n    this.init_connection();\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(this.state.ros);\n\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"connection established!\");\n      this.setState({ connected: true });\n    });\n\n    this.state.ros.on(\"close\", () => {\n      console.log(\"connection is closed!\");\n      this.setState({ connected: false });\n      //try to reconnect every 3 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\n            \"ws://\" +\n              Config.ROSBRIDGE_SERVER_IP +\n              \":\" +\n              Config.ROSBRIDGE_SERVER_PORT +\n              \"\"\n          );\n        } catch (error) {\n          console.log(\"connection problem \");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n    } catch (error) {\n      console.log(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n      console.log(\"connection problem \");\n    }\n  }\n\n  render() {\n    return (\n      <div style={\n        {\n          marginTop: \"10%\",\n          position: \"relative\",\n          float: \"left\",\n          width: \"95%\"\n        }\n      }>\n        <Alert\n          className=\"text-center\"\n          variant={this.state.connected ? \"success\" : \"danger\"}\n        >\n          {this.state.connected ? \"Robot Connected\" : \"Robot Disconnected\"}\n        </Alert>\n      </div>\n    );\n  }\n}\n\nexport default Connection;\n","/home/minhtan/Documents/robotservices/src/components/RobotState.jsx",["128","129","130","131","132"],"/home/minhtan/Documents/robotservices/src/components/Map.jsx",["133","134"],"import React, { Component } from \"react\";\nimport Config from \"../scripts/config\";\n\nclass Map extends Component {\n  state = {\n    ros: null,\n  };\n\n  constructor() {\n    super();\n    //this.init_connection = this.view_map.bind(this);\n    this.view_map = this.view_map.bind(this);\n  }\n\n  init_connection() {\n    //this.setState({ ros: new ROSLIB.Ros() });\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(\"Map:\" + this.state.ros);\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n    } catch (error) {\n      console.log(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n      console.log(\"cannot connect to the WS robot. Try again after 1 second\");\n    }\n  }\n\n  componentDidMount() {\n    this.init_connection();\n    console.log(\"Map: componentDidMount\" + this.state.ros);\n    this.view_map();\n  }\n\n  view_map() {\n    var viewer = new window.ROS2D.Viewer({\n      divID: \"nav_div\",\n      width: 720,\n      height: 640,\n    });\n    var navClient = new window.NAV2D.OccupancyGridClientNav({\n      ros: this.state.ros,\n      rootObject: viewer.scene,\n      viewer: viewer,\n      serverName: \"/move_base\",\n      withOrientation: true,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div id=\"nav_div\" style={{\n          position: \"relative\",\n          float: \"right\"\n        }}></div>\n      </div>\n    );\n  }\n}\n\nexport default Map;\n","/home/minhtan/Documents/robotservices/src/components/Teleoperation.jsx",["135"],"import React, { Component } from \"react\";\nimport { Joystick } from \"react-joystick-component\";\nimport Config from \"../scripts/config\";\n\nclass Teleoperation extends Component {\n  state = { ros: null };\n\n  constructor() {\n    super();\n    this.init_connection();\n\n    this.handleMove = this.handleMove.bind(this);\n    this.handleStop = this.handleStop.bind(this);\n  }\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(this.state.ros);\n\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"connection established in Teleoperation Component!\");\n      console.log(this.state.ros);\n      this.setState({ connected: true });\n    });\n\n    this.state.ros.on(\"close\", () => {\n      console.log(\"connection is closed!\");\n      this.setState({ connected: false });\n      //try to reconnect every 3 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\n            \"ws://\" +\n              Config.ROSBRIDGE_SERVER_IP +\n              \":\" +\n              Config.ROSBRIDGE_SERVER_PORT +\n              \"\"\n          );\n        } catch (error) {\n          console.log(\"connection problem \");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n    } catch (error) {\n      console.log(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n      console.log(\"connection problem \");\n    }\n  }\n\n  handleMove(event) {\n    console.log(\"handle move\");\n    //we need to create a ROS publisher on the topic cmd_vel\n    var cmd_vel = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: Config.CMD_VEL_TOPIC,\n      messageType: \"geometry_msgs/Twist\",\n    });\n    //we need to create a twist message to be to published to rosbridge\n    var twist = new window.ROSLIB.Message({\n      linear: {\n        x: event.y / 50,\n        y: 0,\n        z: 0,\n      },\n      angular: {\n        x: 0,\n        y: 0,\n        z: -event.x / 50,\n      },\n    });\n    //we need to publish the message on the cmd_vel topic\n    cmd_vel.publish(twist);\n  }\n  handleStop(event) {\n    console.log(\"handle stop\");\n    //we need to create a ROS publisher on the topic cmd_vel\n    var cmd_vel = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: Config.CMD_VEL_TOPIC,\n      messageType: \"geometry_msgs/Twist\",\n    });\n    //we need to create a twist message to be to published to rosbridge\n    var twist = new window.ROSLIB.Message({\n      linear: {\n        x: 0,\n        y: 0,\n        z: 0,\n      },\n      angular: {\n        x: 0,\n        y: 0,\n        z: 0,\n      },\n    });\n    //we need to publish the message on the cmd_vel topic\n    cmd_vel.publish(twist);\n  }\n\n  render() {\n    return (\n      <div>\n        <Joystick\n          size={100}\n          baseColor=\"#EEEEEE\"\n          stickColor=\"#BBBBBB\"\n          move={this.handleMove}\n          stop={this.handleStop}\n        ></Joystick>\n      </div>\n    );\n  }\n}\n\nexport default Teleoperation;\n","/home/minhtan/Documents/robotservices/src/components/SetGoal_1.jsx",["136","137","138","139"],"import React, { Component } from \"react\";\nimport { Row, Col, Container, Button } from \"react-bootstrap\";\n\nimport Config from \"../scripts/config\";\n\nclass SetGoal_1 extends Component {\n    state = { ros: null }\n\n    constructor() {\n        super()\n\n        this.init_connection()\n\n        this.sendCommand = this.sendCommand.bind(this)\n    }\n\n    init_connection() {\n        this.state.ros = new window.ROSLIB.Ros()\n        this.state.ros.on('connection', (e) => {\n            console.log(e)\n            this.setState({\n                ros: this.state.ros\n            })\n        })\n        try {\n            console.log('connect')\n            this.state.ros.connect(\n                \"ws://\" +\n                Config.ROSBRIDGE_SERVER_IP +\n                \":\" +\n                Config.ROSBRIDGE_SERVER_PORT +\n                \"\"\n            )\n\n\n            console.log(\"SetGoal_1 - Connected\")\n        } catch (error) {\n            console.log(\n                \"ws://\" +\n                Config.ROSBRIDGE_SERVER_IP +\n                \":\" +\n                Config.ROSBRIDGE_SERVER_PORT +\n                \"\"\n            )\n            console.log(\"SetGoal_1 - cannot connect to the WS robot. Try again after 1 second\");\n        }\n    }\n\n    sendCommand(event) {\n        console.log(\"SetGoal_1 sent command\")\n        console.log(this.state.ros)\n\n        const goal = new window.ROSLIB.Goal({\n            actionClient: new window.ROSLIB.ActionClient({\n                ros: this.state.ros,\n                serverName: '/move_base',\n                actionName: 'move_base_msgs/MoveBaseAction'\n            }),\n            goalMessage: {\n                target_pose: {\n                    header: {\n                        frame_id: 'map'  // Replace with the desired frame ID\n                    },\n                    pose: {\n                        position: {\n                            x: 0.5,  // Replace with the desired position\n                            y: 0.0,\n                            z: 0.0\n                        },\n                        orientation: {\n                            x: 0.0,\n                            y: 0.0,\n                            z: 0.0,\n                            w: 1.0\n                        }\n                    }\n                }\n            }\n        });\n\n        goal.send();\n        console.log('Goal 1 sent!');\n    }\n\n    render() {\n        return (\n            <div style={{\n                marginTop: \"10%\"\n            }}>\n                <Button onClick={this.sendCommand} variant=\"info\"\n                    style={\n                        { width: \"95%\" }\n                    }>\n\n                    ROBOT RETURN\n\n                </Button>\n            </div>\n        )\n    }\n}\n\nexport default SetGoal_1\n","/home/minhtan/Documents/robotservices/src/components/SetGoal_2.jsx",["140","141","142","143","144"],"/home/minhtan/Documents/robotservices/src/components/HomeNavbar.jsx",[],"/home/minhtan/Documents/robotservices/src/components/ViewOrder.jsx",[],"/home/minhtan/Documents/robotservices/src/scripts/config.js",[],"/home/minhtan/Documents/robotservices/src/components/OrderDetail.jsx",[],"/home/minhtan/Documents/robotservices/src/components/OrderSuccess.jsx",["145","146","147","148","149","150","151"],"import { useHistory } from \"react-router-dom\";\nimport React, { useEffect, useState } from \"react\";\nimport { Row, Col, Container, Button, Form, Table } from \"react-bootstrap\";\n\nconst OrderSuccess = () => {\n    const history = useHistory()\n\n    const handleOrderAgain = async (event) => {\n        history.push('/newOrder')\n    }\n\n    return (\n        <div>\n            ORDER SUCCESSFULLY!\n            <div>\n                <Button type=\"submit\" onClick={(event) => handleOrderAgain(event)}>\n                    ORDER AGAIN\n                </Button>\n            </div>\n        </div>\n    )\n}\n\nexport default OrderSuccess","/home/minhtan/Documents/robotservices/src/components/CurrentOrder.jsx",["152","153","154","155","156"],"import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { Modal, Card, Table, Col, Row, Button } from \"react-bootstrap\";\nimport SetGoal_2 from \"./SetGoal_2\";\n\nconst CurrentOrder = () => {\n    const [drinks, setDrinks] = useState([]);\n    const [orders, setOrders] = useState([]);\n\n    const [orderDetails, setOrderDetails] = useState([]);\n\n    useEffect(() => {\n        fetchDrinks();\n    }, []);\n\n    useEffect(() => {\n        fetchOrders();\n    }, []);\n\n    const fetchDrinks = async () => {\n        try {\n            const response = await axios.get(\"https://db-api-5yux.onrender.com/drink\");\n            const data = response.data;\n            setDrinks(data);\n        } catch (error) {\n            console.log(\"Error fetching drinks:\", error);\n        }\n    };\n\n    const fetchOrders = async () => {\n        const details = []\n\n        try {\n            const response = await axios.get(\"https://db-api-5yux.onrender.com/order\")\n            const data = response.data[response.data.length - 1]\n            const orderList = data.OrderList\n\n            setOrders(data)\n\n            for (let detailId of orderList) {\n                const res = await axios.get(`https://db-api-5yux.onrender.com/orderDetail/${detailId}`)\n                const dataDetails = res.data\n                details.push(dataDetails)\n            }\n\n            setOrderDetails(details)\n        } catch (error) {\n            console.log(\"Error fetching orders:\", error);\n        }\n    };\n\n    const cusStyle = {\n        position: \"relative\",\n        float: \"right\"\n    }\n\n    return (\n        <div style={{ cusStyle }}>\n            <Card bg=\"warning\" text=\"primary\" style={{marginTop: \"3%\"}}>\n                <Card.Body>\n                    <h5 style={{\n                        marginTop: \"3%\",\n                        marginBottom: \"5%\"\n                    }}>TABLE 1</h5>\n                    <h6 style={{\n                        marginBottom: \"0\",\n                        marginTop: \"3%\"\n                    }}>List drinks of order</h6>\n                    <Table striped borderless hover responsive size=\"md\">\n                        <thead>\n                            <tr>\n                                <th><h6>#</h6></th>\n                                <th><h6>Drink</h6></th>\n                                <th><h6>Price</h6></th>\n                                <th><h6>Price</h6></th>\n                            </tr>\n                        </thead>\n                        <tbody id=\"orders_table\">\n                            {orderDetails.map((order, index) => {\n                                const drink = drinks.find((d) => d._id === order.Drink)\n                                return (\n                                    <tr key={order._id}>\n                                        <td><h6>{index + 1}</h6></td>\n                                        <td><h6>{drink ? drink.DrinkName : \"\"}</h6></td>\n                                        <td><h6>{drink ? drink.DrinkPrice : 0}</h6></td>\n                                        <td><h6>{order.Qty}</h6></td>\n                                    </tr>\n                                )\n                            })}\n                            <tr>\n                                <td colSpan={2}><h6>Note: {orders.Note}</h6></td>\n                                <td colSpan={2}><h6>Total: {orders.Total}</h6></td>\n                            </tr>\n                            {/* <tr>\n                        <Button variant=\"success\">DELIVER</Button>\n                    </tr> */}\n                        </tbody>\n                    </Table>\n                </Card.Body>\n            </Card>\n        </div>\n    )\n}\n\nexport default CurrentOrder","/home/minhtan/Documents/robotservices/src/components/SetGoal_3.jsx",["157","158","159","160","161"],"/home/minhtan/Documents/robotservices/src/components/SetGoal_4.jsx",["162","163","164","165"],"import React, { Component } from \"react\";\nimport { Row, Col, Container, Button } from \"react-bootstrap\";\n\nimport Config from \"../scripts/config\"\n\nclass SetGoal_4 extends Component {\n    state = { ros: null }\n    constructor() {\n        super()\n\n        this.init_connection()\n\n        this.sendCommand = this.sendCommand.bind(this)\n    }\n\n\n    init_connection() {\n        this.state.ros = new window.ROSLIB.Ros()\n        this.state.ros.on('connection', (e) => {\n            console.log(e)\n            this.setState({\n                ros: this.state.ros\n            })\n        })\n        try {\n            console.log('connect')\n            this.state.ros.connect(\n                \"ws://\" +\n                Config.ROSBRIDGE_SERVER_IP +\n                \":\" +\n                Config.ROSBRIDGE_SERVER_PORT +\n                \"\"\n            )\n\n\n            console.log(\"SetGoal_4 - Connected\")\n        } catch (error) {\n            console.log(\n                \"ws://\" +\n                Config.ROSBRIDGE_SERVER_IP +\n                \":\" +\n                Config.ROSBRIDGE_SERVER_PORT +\n                \"\"\n            )\n            console.log(\"SetGoal_4 - cannot connect to the WS robot. Try again after 1 second\");\n        }\n    }\n\n    sendCommand(event) {\n        console.log(\"SetGoal_4 sent command\")\n        console.log(this.state.ros)\n\n        const goal = new window.ROSLIB.Goal({\n            actionClient: new window.ROSLIB.ActionClient({\n                ros: this.state.ros,\n                serverName: '/move_base',\n                actionName: 'move_base_msgs/MoveBaseAction'\n            }),\n            goalMessage: {\n                target_pose: {\n                    header: {\n                        frame_id: 'map'  // Replace with the desired frame ID\n                    },\n                    pose: {\n                        position: {\n                            x: 2.0,  // Replace with the desired position\n                            y: 2.0,\n                            z: 0.0\n                        },\n                        orientation: {\n                            x: 0.0,\n                            y: 0.0,\n                            z: 0.0,\n                            w: 1.0\n                        }\n                    }\n                }\n            }\n        });\n\n        goal.send();\n        console.log('Goal 4 sent!');\n    }\n\n    render() {\n        return (\n            <div>\n                <Button onClick={this.sendCommand} variant=\"success\"\n                    style={{\n                        position: \"relative\",\n                        float: \"left\"\n                    }}>\n                    TABLE 3\n                </Button>\n            </div>\n        )\n    }\n}\n\nexport default SetGoal_4\n","/home/minhtan/Documents/robotservices/src/components/SetGoal_5.jsx",["166","167","168","169"],"import React, { Component } from \"react\";\nimport { Row, Col, Container, Button } from \"react-bootstrap\";\n\nimport Config from \"../scripts/config\"\n\nclass SetGoal_5 extends Component {\n    state = { ros: null }\n    constructor() {\n        super()\n\n        this.init_connection()\n\n        this.sendCommand = this.sendCommand.bind(this)\n    }\n\n\n    init_connection() {\n        this.state.ros = new window.ROSLIB.Ros()\n        this.state.ros.on('connection', (e) => {\n            console.log(e)\n            this.setState({\n                ros: this.state.ros\n            })\n        })\n        try {\n            console.log('connect')\n            this.state.ros.connect(\n                \"ws://\" +\n                Config.ROSBRIDGE_SERVER_IP +\n                \":\" +\n                Config.ROSBRIDGE_SERVER_PORT +\n                \"\"\n            )\n\n\n            console.log(\"SetGoal_5 - Connected\")\n        } catch (error) {\n            console.log(\n                \"ws://\" +\n                Config.ROSBRIDGE_SERVER_IP +\n                \":\" +\n                Config.ROSBRIDGE_SERVER_PORT +\n                \"\"\n            )\n            console.log(\"SetGoal_5 - cannot connect to the WS robot. Try again after 1 second\");\n        }\n    }\n\n    sendCommand(event) {\n        console.log(\"SetGoal_5 sent command\")\n        console.log(this.state.ros)\n\n        const goal = new window.ROSLIB.Goal({\n            actionClient: new window.ROSLIB.ActionClient({\n                ros: this.state.ros,\n                serverName: '/move_base',\n                actionName: 'move_base_msgs/MoveBaseAction'\n            }),\n            goalMessage: {\n                target_pose: {\n                    header: {\n                        frame_id: 'map'  // Replace with the desired frame ID\n                    },\n                    pose: {\n                        position: {\n                            x: 2.0,  // Replace with the desired position\n                            y: 1.0,\n                            z: 0.0\n                        },\n                        orientation: {\n                            x: 0.0,\n                            y: 0.0,\n                            z: 0.0,\n                            w: 1.0\n                        }\n                    }\n                }\n            }\n        });\n\n        goal.send();\n        console.log('Goal 5 sent!');\n    }\n\n    render() {\n        return (\n            <div>\n                <Button onClick={this.sendCommand} variant=\"success\"\n                    style={{\n                        position: \"relative\",\n                        float: \"left\"\n                    }}>\n                    TABLE 4\n                </Button>\n            </div>\n        )\n    }\n}\n\nexport default SetGoal_5\n",{"ruleId":"170","replacedBy":"171"},{"ruleId":"172","replacedBy":"173"},{"ruleId":"174","severity":1,"message":"175","line":2,"column":10,"nodeType":"176","messageId":"177","endLine":2,"endColumn":19},{"ruleId":"174","severity":1,"message":"178","line":2,"column":21,"nodeType":"176","messageId":"177","endLine":2,"endColumn":27},{"ruleId":"174","severity":1,"message":"179","line":2,"column":29,"nodeType":"176","messageId":"177","endLine":2,"endColumn":32},{"ruleId":"174","severity":1,"message":"180","line":13,"column":8,"nodeType":"176","messageId":"177","endLine":13,"endColumn":17},{"ruleId":"174","severity":1,"message":"181","line":16,"column":31,"nodeType":"176","messageId":"177","endLine":16,"endColumn":35},{"ruleId":"182","severity":1,"message":"183","line":75,"column":19,"nodeType":"184","messageId":"185","endLine":75,"endColumn":32},{"ruleId":"182","severity":1,"message":"186","line":78,"column":19,"nodeType":"184","messageId":"185","endLine":78,"endColumn":32},{"ruleId":"182","severity":1,"message":"187","line":81,"column":19,"nodeType":"184","messageId":"185","endLine":81,"endColumn":32},{"ruleId":"182","severity":1,"message":"188","line":84,"column":19,"nodeType":"184","messageId":"185","endLine":84,"endColumn":32},{"ruleId":"182","severity":1,"message":"189","line":89,"column":19,"nodeType":"184","messageId":"185","endLine":89,"endColumn":32},{"ruleId":"174","severity":1,"message":"190","line":3,"column":26,"nodeType":"176","messageId":"177","endLine":3,"endColumn":31},{"ruleId":"191","severity":1,"message":"192","line":13,"column":5,"nodeType":"193","messageId":"194","endLine":13,"endColumn":15},{"ruleId":"174","severity":1,"message":"195","line":2,"column":10,"nodeType":"176","messageId":"177","endLine":2,"endColumn":13},{"ruleId":"174","severity":1,"message":"196","line":2,"column":15,"nodeType":"176","messageId":"177","endLine":2,"endColumn":18},{"ruleId":"174","severity":1,"message":"175","line":2,"column":20,"nodeType":"176","messageId":"177","endLine":2,"endColumn":29},{"ruleId":"174","severity":1,"message":"197","line":2,"column":31,"nodeType":"176","messageId":"177","endLine":2,"endColumn":37},{"ruleId":"191","severity":1,"message":"192","line":24,"column":5,"nodeType":"193","messageId":"194","endLine":24,"endColumn":15},{"ruleId":"191","severity":1,"message":"192","line":17,"column":5,"nodeType":"193","messageId":"194","endLine":17,"endColumn":15},{"ruleId":"174","severity":1,"message":"198","line":51,"column":9,"nodeType":"176","messageId":"177","endLine":51,"endColumn":18},{"ruleId":"191","severity":1,"message":"192","line":16,"column":5,"nodeType":"193","messageId":"194","endLine":16,"endColumn":15},{"ruleId":"174","severity":1,"message":"195","line":2,"column":10,"nodeType":"176","messageId":"177","endLine":2,"endColumn":13},{"ruleId":"174","severity":1,"message":"196","line":2,"column":15,"nodeType":"176","messageId":"177","endLine":2,"endColumn":18},{"ruleId":"174","severity":1,"message":"175","line":2,"column":20,"nodeType":"176","messageId":"177","endLine":2,"endColumn":29},{"ruleId":"191","severity":1,"message":"192","line":18,"column":9,"nodeType":"193","messageId":"194","endLine":18,"endColumn":19},{"ruleId":"174","severity":1,"message":"195","line":2,"column":10,"nodeType":"176","messageId":"177","endLine":2,"endColumn":13},{"ruleId":"174","severity":1,"message":"196","line":2,"column":15,"nodeType":"176","messageId":"177","endLine":2,"endColumn":18},{"ruleId":"174","severity":1,"message":"175","line":2,"column":20,"nodeType":"176","messageId":"177","endLine":2,"endColumn":29},{"ruleId":"174","severity":1,"message":"190","line":5,"column":10,"nodeType":"176","messageId":"177","endLine":5,"endColumn":15},{"ruleId":"191","severity":1,"message":"192","line":21,"column":9,"nodeType":"193","messageId":"194","endLine":21,"endColumn":19},{"ruleId":"174","severity":1,"message":"199","line":2,"column":17,"nodeType":"176","messageId":"177","endLine":2,"endColumn":26},{"ruleId":"174","severity":1,"message":"200","line":2,"column":28,"nodeType":"176","messageId":"177","endLine":2,"endColumn":36},{"ruleId":"174","severity":1,"message":"195","line":3,"column":10,"nodeType":"176","messageId":"177","endLine":3,"endColumn":13},{"ruleId":"174","severity":1,"message":"196","line":3,"column":15,"nodeType":"176","messageId":"177","endLine":3,"endColumn":18},{"ruleId":"174","severity":1,"message":"175","line":3,"column":20,"nodeType":"176","messageId":"177","endLine":3,"endColumn":29},{"ruleId":"174","severity":1,"message":"201","line":3,"column":39,"nodeType":"176","messageId":"177","endLine":3,"endColumn":43},{"ruleId":"174","severity":1,"message":"202","line":3,"column":45,"nodeType":"176","messageId":"177","endLine":3,"endColumn":50},{"ruleId":"174","severity":1,"message":"203","line":3,"column":10,"nodeType":"176","messageId":"177","endLine":3,"endColumn":15},{"ruleId":"174","severity":1,"message":"196","line":3,"column":30,"nodeType":"176","messageId":"177","endLine":3,"endColumn":33},{"ruleId":"174","severity":1,"message":"195","line":3,"column":35,"nodeType":"176","messageId":"177","endLine":3,"endColumn":38},{"ruleId":"174","severity":1,"message":"197","line":3,"column":40,"nodeType":"176","messageId":"177","endLine":3,"endColumn":46},{"ruleId":"174","severity":1,"message":"204","line":4,"column":8,"nodeType":"176","messageId":"177","endLine":4,"endColumn":17},{"ruleId":"174","severity":1,"message":"195","line":2,"column":10,"nodeType":"176","messageId":"177","endLine":2,"endColumn":13},{"ruleId":"174","severity":1,"message":"196","line":2,"column":15,"nodeType":"176","messageId":"177","endLine":2,"endColumn":18},{"ruleId":"174","severity":1,"message":"175","line":2,"column":20,"nodeType":"176","messageId":"177","endLine":2,"endColumn":29},{"ruleId":"174","severity":1,"message":"190","line":3,"column":10,"nodeType":"176","messageId":"177","endLine":3,"endColumn":15},{"ruleId":"191","severity":1,"message":"192","line":19,"column":9,"nodeType":"193","messageId":"194","endLine":19,"endColumn":19},{"ruleId":"174","severity":1,"message":"195","line":2,"column":10,"nodeType":"176","messageId":"177","endLine":2,"endColumn":13},{"ruleId":"174","severity":1,"message":"196","line":2,"column":15,"nodeType":"176","messageId":"177","endLine":2,"endColumn":18},{"ruleId":"174","severity":1,"message":"175","line":2,"column":20,"nodeType":"176","messageId":"177","endLine":2,"endColumn":29},{"ruleId":"191","severity":1,"message":"192","line":18,"column":9,"nodeType":"193","messageId":"194","endLine":18,"endColumn":19},{"ruleId":"174","severity":1,"message":"195","line":2,"column":10,"nodeType":"176","messageId":"177","endLine":2,"endColumn":13},{"ruleId":"174","severity":1,"message":"196","line":2,"column":15,"nodeType":"176","messageId":"177","endLine":2,"endColumn":18},{"ruleId":"174","severity":1,"message":"175","line":2,"column":20,"nodeType":"176","messageId":"177","endLine":2,"endColumn":29},{"ruleId":"191","severity":1,"message":"192","line":18,"column":9,"nodeType":"193","messageId":"194","endLine":18,"endColumn":19},"no-native-reassign",["205"],"no-negated-in-lhs",["206"],"no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","'Navbar' is defined but never used.","'Nav' is defined but never used.","'ViewOrder' is defined but never used.","'Card' is defined but never used.","react/jsx-pascal-case","Imported JSX component SetGoal_2 must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","Imported JSX component SetGoal_3 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component SetGoal_4 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component SetGoal_5 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component SetGoal_1 must be in PascalCase or SCREAMING_SNAKE_CASE","'toast' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","noDirectMutation","'Row' is defined but never used.","'Col' is defined but never used.","'Button' is defined but never used.","'navClient' is assigned a value but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'Form' is defined but never used.","'Table' is defined but never used.","'Modal' is defined but never used.","'SetGoal_2' is defined but never used.","no-global-assign","no-unsafe-negation"]