[{"/home/minhtan/Documents/robotservices/src/index.js":"1","/home/minhtan/Documents/robotservices/src/reportWebVitals.js":"2","/home/minhtan/Documents/robotservices/src/App.js":"3","/home/minhtan/Documents/robotservices/src/components/Header.jsx":"4","/home/minhtan/Documents/robotservices/src/components/Body.jsx":"5","/home/minhtan/Documents/robotservices/src/components/Home.jsx":"6","/home/minhtan/Documents/robotservices/src/components/TestDataBase.jsx":"7","/home/minhtan/Documents/robotservices/src/components/About.jsx":"8","/home/minhtan/Documents/robotservices/src/components/Order.jsx":"9","/home/minhtan/Documents/robotservices/src/components/Drink.jsx":"10","/home/minhtan/Documents/robotservices/src/components/Connection.jsx":"11","/home/minhtan/Documents/robotservices/src/components/RobotState.jsx":"12","/home/minhtan/Documents/robotservices/src/components/Map.jsx":"13","/home/minhtan/Documents/robotservices/src/components/Teleoperation.jsx":"14","/home/minhtan/Documents/robotservices/src/components/SetGoal_1.jsx":"15","/home/minhtan/Documents/robotservices/src/components/SetGoal_2.jsx":"16","/home/minhtan/Documents/robotservices/src/components/HomeNavbar.jsx":"17","/home/minhtan/Documents/robotservices/src/components/ViewOrder.jsx":"18","/home/minhtan/Documents/robotservices/src/scripts/config.js":"19","/home/minhtan/Documents/robotservices/src/components/OrderDetail.jsx":"20","/home/minhtan/Documents/robotservices/src/components/OrderSuccess.jsx":"21"},{"size":660,"mtime":1687185290000,"results":"22","hashOfConfig":"23"},{"size":362,"mtime":1687020422000,"results":"24","hashOfConfig":"23"},{"size":212,"mtime":1687280864000,"results":"25","hashOfConfig":"23"},{"size":813,"mtime":1687591994317,"results":"26","hashOfConfig":"23"},{"size":990,"mtime":1687594065730,"results":"27","hashOfConfig":"23"},{"size":1546,"mtime":1687594749050,"results":"28","hashOfConfig":"23"},{"size":997,"mtime":1687596047698,"results":"29","hashOfConfig":"23"},{"size":324,"mtime":1687020422000,"results":"30","hashOfConfig":"23"},{"size":6952,"mtime":1687595201222,"results":"31","hashOfConfig":"23"},{"size":1451,"mtime":1687595278106,"results":"32","hashOfConfig":"23"},{"size":1759,"mtime":1687020422000,"results":"33","hashOfConfig":"23"},{"size":3936,"mtime":1687020422000,"results":"34","hashOfConfig":"23"},{"size":1490,"mtime":1687020422000,"results":"35","hashOfConfig":"23"},{"size":3149,"mtime":1687020422000,"results":"36","hashOfConfig":"23"},{"size":2582,"mtime":1687281466000,"results":"37","hashOfConfig":"23"},{"size":3736,"mtime":1687184490000,"results":"38","hashOfConfig":"23"},{"size":780,"mtime":1687594779837,"results":"39","hashOfConfig":"23"},{"size":2436,"mtime":1687592553327,"results":"40","hashOfConfig":"23"},{"size":303,"mtime":1687589208075,"results":"41","hashOfConfig":"23"},{"size":1862,"mtime":1687592835102,"results":"42","hashOfConfig":"23"},{"size":617,"mtime":1687591819691,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"wg1h7d",{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"46"},"/home/minhtan/Documents/robotservices/src/index.js",[],["97","98"],"/home/minhtan/Documents/robotservices/src/reportWebVitals.js",[],"/home/minhtan/Documents/robotservices/src/App.js",[],"/home/minhtan/Documents/robotservices/src/components/Header.jsx",["99","100","101"],"import React, { Component } from \"react\";\nimport { Container, Navbar, Nav } from \"react-bootstrap\";\nclass Header extends Component {\n  render() {\n    return (\n      // <Container>\n      //   <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" collapseOnSelect>\n      //     <Navbar.Brand href=\"#home\">React ROS Robot</Navbar.Brand>\n      //     <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      //     <Navbar.Collapse id=\"basic-navbar-nav\">\n      //       <Nav className=\"mr-auto\">\n      //         <Nav.Link href=\"/\">Home</Nav.Link>\n      //         <Nav.Link href=\"/about\">About</Nav.Link>\n      //         <Nav.Link href=\"/testDataBase\">Database</Nav.Link>\n      //       </Nav>\n      //     </Navbar.Collapse>\n      //   </Navbar>\n      // </Container>\n      <div></div>\n    );\n  }\n}\n\nexport default Header;\n","/home/minhtan/Documents/robotservices/src/components/Body.jsx",[],"/home/minhtan/Documents/robotservices/src/components/Home.jsx",["102","103"],"import React, { Component } from \"react\";\nimport Connection from \"./Connection\";\nimport RobotState from \"./RobotState\";\nimport Teleoperation from \"./Teleoperation\";\nimport Map from \"./Map\";\nimport SetGoal_1 from \"./SetGoal_1\";\nimport SetGoal_2 from \"./SetGoal_2\";\nimport HomeNavbar from \"./HomeNavbar\";\n\nimport { Row, Col, Container } from \"react-bootstrap\";\nimport { ToastContainer, toast } from \"react-toastify\";\n\nclass Home extends Component {\n  componentDidMount() {\n    const channel = new BroadcastChannel(\"6B29FC40-CA47-1067-B31D-00DD010662DA\");\n\n    const handleMessage = (event) => {\n      toast.success(\"NEW ORDER FROM CLIENT\", {\n        position: toast.POSITION.TOP_RIGHT,\n      });\n    };\n\n    channel.addEventListener(\"message\", handleMessage);\n\n    this.channel = channel;\n  }\n\n  componentWillUnmount() {\n    if (this.channel) {\n      this.channel.removeEventListener(\"message\", this.handleMessage);\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <HomeNavbar />\n        <Container>\n          <Row>\n            <Col>\n              <Connection />\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Teleoperation />\n              <SetGoal_1 />\n              <SetGoal_2 />\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <RobotState />\n            </Col>\n            <Col>\n              <h1>MAP</h1>\n              <Map />\n            </Col>\n          </Row>\n          <ToastContainer />\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","/home/minhtan/Documents/robotservices/src/components/TestDataBase.jsx",[],"/home/minhtan/Documents/robotservices/src/components/About.jsx",[],"/home/minhtan/Documents/robotservices/src/components/Order.jsx",["104"],"import React, { useEffect, useState } from \"react\";\nimport { Row, Col, Container, Button, Form, Table } from \"react-bootstrap\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport axios from \"axios\";\n\nimport { useHistory } from \"react-router-dom\";\n\nconst Order = () => {\n  const history = useHistory();\n  const defaultOrder = {\n    Date: new Date().toLocaleDateString(\"en-GB\"),\n    StaffID: \"Staff-01\",\n    OrderList: [],\n    Note: \"\",\n    Total: 0,\n  };\n  const [order, setOrder] = useState(defaultOrder);\n  const defaultOrderDetail = { Drink: null, Price: 0, Qty: \"\" };\n  const [orderDetails, setOrderDetails] = useState([defaultOrderDetail]);\n  const [drinks, setDrinks] = useState([]);\n\n  useEffect(() => {\n    fetchDrinks();\n  }, []);\n\n  useEffect(() => {\n    calculateTotalPrice();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [orderDetails]);\n\n  const btnAddRow_onclick = () => {\n    setOrderDetails([...orderDetails, defaultOrderDetail]);\n  };\n\n  const fetchDrinks = async () => {\n    try {\n      const response = await axios.get(\"https://db-api-5yux.onrender.com/drink\");\n      const data = response.data;\n      setDrinks(data);\n    } catch (error) {\n      console.log(\"Error fetching drinks:\", error);\n    }\n  };\n\n  const calculateTotalPrice = () => {\n    let total = 0;\n    orderDetails.forEach((detail) => {\n      const price = parseInt(detail.Price, 10);\n      const qty = parseInt(detail.Qty, 10);\n      total += price * qty;\n    });\n\n    if (isNaN(total)) total = 0;\n\n    setOrder({ ...order, Total: total });\n  };\n\n  const handleDrinkChange = (event, index) => {\n    const value = event.target.value;\n\n    const drink = drinks.find((d) => d._id === value);\n\n    const updatedOrderDetails = [...orderDetails];\n    updatedOrderDetails[index] = {\n      ...updatedOrderDetails[index],\n      Drink: value,\n      Price: drink ? drink.DrinkPrice : 0,\n    };\n    setOrderDetails(updatedOrderDetails);\n  };\n\n  const handleQtyChange = (event, index) => {\n    const { value } = event.target;\n    const numericValue = value.replace(/[^0-9]/g, \"\"); // Filter out non-numeric characters\n    const updatedOrderDetails = [...orderDetails];\n    updatedOrderDetails[index].Qty = numericValue;\n    setOrderDetails(updatedOrderDetails);\n  };\n\n  const handleNotesChange = (event) => {\n    const { value } = event.target;\n    setOrder({ ...order, Note: value });\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n      try {\n      // Create order details\n      const detailIds = [];\n\n      for (const detail of orderDetails) {\n        if (detail.Drink && detail.Price && detail.Qty) {\n          const orderDetailsResponse = await axios.post(\n            \"https://db-api-5yux.onrender.com/orderDetail\",\n            detail\n          );\n\n          detailIds.push(orderDetailsResponse.data._id);\n          console.log(\n            \"New order detail created:\",\n            orderDetailsResponse.statusText\n          );\n        }\n      }\n\n      // Create order\n      const updatedOrder = { ...order, OrderList: detailIds };\n      const orderResponse = await axios.post(\n        \"https://db-api-5yux.onrender.com/order\",\n        updatedOrder\n      );\n\n      // Navigation and toast\n      if (orderResponse.status === 201) {\n        const channel = new BroadcastChannel(\"6B29FC40-CA47-1067-B31D-00DD010662DA\");\n        channel.postMessage(\"Tạo Order thành công!\");\n\n        history.push('/orderSuccess')\n      } else {\n        console.log(orderResponse.status);\n      }\n    } catch (error) {\n      console.log(\"Error creating new order and order details:\", error);\n    }\n  };\n\n  return (\n    <div>\n      <Form>\n        <Container>\n          <Row className=\"justify-content-md-center\">\n            <Col md={10}>\n              <Form.Group>\n                <Table striped borderless hover responsive size=\"sm\">\n                  <thead>\n                    <tr>\n                      <th className=\"text-center\">#</th>\n                      <th className=\"text-center\">Thức uống</th>\n                      <th className=\"text-center\">Đơn giá</th>\n                      <th className=\"text-center\">Số lượng</th>\n                    </tr>\n                  </thead>\n                  <tbody id=\"orderDetails_table\">\n                    {orderDetails.map((detail, index) => (\n                      <tr key={index}>\n                        <td className=\"d-flex center text-center\">\n                          <h3 className=\"stt\">{index + 1}</h3>\n                        </td>\n                        <td>\n                          <select\n                            className=\"table-select\"\n                            onChange={(event) =>\n                              handleDrinkChange(event, index)\n                            }\n                          >\n                            <option key={0} value={0}>\n                              Chọn món\n                            </option>\n                            {drinks.map((drink, index) => (\n                              <option key={index + 1} value={drink._id}>\n                                {drink.DrinkName}\n                              </option>\n                            ))}\n                          </select>\n                        </td>\n                        <td>\n                          <Form.Control\n                            type=\"text\"\n                            value={detail.Price}\n                            readOnly\n                          ></Form.Control>\n                        </td>\n                        <td>\n                          <Form.Control\n                            type=\"text\"\n                            value={detail.Qty}\n                            onChange={(event) => handleQtyChange(event, index)}\n                          ></Form.Control>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </Table>\n                <h5>Total: {order.Total} Đ</h5>\n              </Form.Group>\n              <Form.Group>\n                <Button type=\"button\" onClick={btnAddRow_onclick}>\n                  <span>+</span> Thêm món\n                </Button>\n              </Form.Group>\n              <Form.Group>\n                <Form.Label>Ghi chú</Form.Label>\n                <Form.Control\n                  as=\"textarea\"\n                  value={order.Note}\n                  rows={3}\n                  onChange={(event) => handleNotesChange(event)}\n                />\n              </Form.Group>\n              <Form.Group className=\"d-flex justify-content-center\">\n                <Button type=\"submit\" onClick={(event) => handleSubmit(event)}>\n                  Đặt món\n                </Button>\n              </Form.Group>\n            </Col>\n          </Row>\n        </Container>\n      </Form>\n      <ToastContainer/>\n    </div>\n  );\n};\n\nexport default Order;\n","/home/minhtan/Documents/robotservices/src/components/Drink.jsx",[],"/home/minhtan/Documents/robotservices/src/components/Connection.jsx",["105"],"import React, { Component } from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Config from \"../scripts/config\";\nclass Connection extends Component {\n  state = { connected: false, ros: null };\n\n  constructor() {\n    super();\n    this.init_connection();\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(this.state.ros);\n\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"connection established!\");\n      this.setState({ connected: true });\n    });\n\n    this.state.ros.on(\"close\", () => {\n      console.log(\"connection is closed!\");\n      this.setState({ connected: false });\n      //try to reconnect every 3 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\n            \"ws://\" +\n              Config.ROSBRIDGE_SERVER_IP +\n              \":\" +\n              Config.ROSBRIDGE_SERVER_PORT +\n              \"\"\n          );\n        } catch (error) {\n          console.log(\"connection problem \");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n    } catch (error) {\n      console.log(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n      console.log(\"connection problem \");\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Alert\n          className=\"text-center m-3\"\n          variant={this.state.connected ? \"success\" : \"danger\"}\n        >\n          {this.state.connected ? \"Robot Connected\" : \"Robot Disconnected\"}\n        </Alert>\n      </div>\n    );\n  }\n}\n\nexport default Connection;\n","/home/minhtan/Documents/robotservices/src/components/RobotState.jsx",["106","107","108"],"import React, { Component } from \"react\";\nimport { Row, Col, Container, Button } from \"react-bootstrap\";\nimport Config from \"../scripts/config\";\nimport * as Three from \"three\";\n\nclass RobotState extends Component {\n  state = {\n    ros: null,\n    x: 0,\n    y: 0,\n    orientation: 0,\n    linear_velocity: 0,\n    angular_velocity: 0,\n  };\n\n  constructor() {\n    super();\n    this.init_connection();\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(this.state.ros);\n\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"connection established in Teleoperation Component!\");\n      console.log(this.state.ros);\n      this.setState({ connected: true });\n    });\n\n    this.state.ros.on(\"close\", () => {\n      console.log(\"connection is closed!\");\n      this.setState({ connected: false });\n      //try to reconnect every 3 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\n            \"ws://\" +\n              Config.ROSBRIDGE_SERVER_IP +\n              \":\" +\n              Config.ROSBRIDGE_SERVER_PORT +\n              \"\"\n          );\n        } catch (error) {\n          console.log(\"connection problem \");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n    } catch (error) {\n      console.log(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n      console.log(\"connection problem \");\n    }\n  }\n\n  componentDidMount() {\n    this.getRobotState();\n  }\n\n  getRobotState() {\n    //create a pose subscriber\n    var pose_subscriber = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: Config.POSE_TOPIC,\n      messageType: \"geometry_msgs/PoseWithCovarianceStamped\",\n    });\n\n    //create a pose callback\n    pose_subscriber.subscribe((message) => {\n      this.setState({ x: message.pose.pose.position.x.toFixed(2) });\n      this.setState({ y: message.pose.pose.position.y.toFixed(2) });\n      this.setState({\n        orientation: this.getOrientationFromQuaternion(\n          message.pose.pose.orientation\n        ).toFixed(2),\n      });\n    });\n\n    //create a subscriber for the velocities in the odom topic\n    var velocity_subscriber = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: Config.ODOM_TOPIC,\n      messageType: \"nav_msgs/Odometry\",\n    });\n\n    //callback function for the odom\n    velocity_subscriber.subscribe((message) => {\n      this.setState({\n        linear_velocity: message.twist.twist.linear.x.toFixed(2),\n      });\n      this.setState({\n        angular_velocity: message.twist.twist.angular.z.toFixed(2),\n      });\n    });\n  }\n\n  getOrientationFromQuaternion(ros_orientation_quaternion) {\n    var q = new Three.Quaternion(\n      ros_orientation_quaternion.x,\n      ros_orientation_quaternion.y,\n      ros_orientation_quaternion.z,\n      ros_orientation_quaternion.w\n    );\n    //convert this quaternion into Roll, Pitch and Yaw\n    var RPY = new Three.Euler().setFromQuaternion(q);\n\n    return RPY[\"_z\"] * (180 / Math.PI);\n  }\n  render() {\n    return (\n      <div>\n        <Row>\n          <Col>\n            <h4 className=\"mt-4\">Position</h4>\n            <p className=\"mt-0\">x: {this.state.x}</p>\n            <p className=\"mt-0\">y: {this.state.y}</p>\n            <p className=\"mt-0\">Orientation: {this.state.orientation}</p>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <h4 className=\"mt-4\">Velocities</h4>\n            <p className=\"mt-0\">\n              Linear Velocity: {this.state.linear_velocity}\n            </p>\n            <p className=\"mt-0\">\n              Angular Velocity: {this.state.angular_velocity}\n            </p>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default RobotState;\n","/home/minhtan/Documents/robotservices/src/components/Map.jsx",["109","110"],"import React, { Component } from \"react\";\nimport Config from \"../scripts/config\";\n\nclass Map extends Component {\n  state = {\n    ros: null,\n  };\n\n  constructor() {\n    super();\n    //this.init_connection = this.view_map.bind(this);\n    this.view_map = this.view_map.bind(this);\n  }\n\n  init_connection() {\n    //this.setState({ ros: new ROSLIB.Ros() });\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(\"Map:\" + this.state.ros);\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n    } catch (error) {\n      console.log(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n      console.log(\"cannot connect to the WS robot. Try again after 1 second\");\n    }\n  }\n\n  componentDidMount() {\n    this.init_connection();\n    console.log(\"Map: componentDidMount\" + this.state.ros);\n    this.view_map();\n  }\n\n  view_map() {\n    var viewer = new window.ROS2D.Viewer({\n      divID: \"nav_div\",\n      width: 640,\n      height: 480,\n    });\n    var navClient = new window.NAV2D.OccupancyGridClientNav({\n      ros: this.state.ros,\n      rootObject: viewer.scene,\n      viewer: viewer,\n      serverName: \"/move_base\",\n      withOrientation: true,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div id=\"nav_div\">Viewer</div>\n      </div>\n    );\n  }\n}\n\nexport default Map;\n","/home/minhtan/Documents/robotservices/src/components/Teleoperation.jsx",["111"],"import React, { Component } from \"react\";\nimport { Joystick } from \"react-joystick-component\";\nimport Config from \"../scripts/config\";\n\nclass Teleoperation extends Component {\n  state = { ros: null };\n\n  constructor() {\n    super();\n    this.init_connection();\n\n    this.handleMove = this.handleMove.bind(this);\n    this.handleStop = this.handleStop.bind(this);\n  }\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(this.state.ros);\n\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"connection established in Teleoperation Component!\");\n      console.log(this.state.ros);\n      this.setState({ connected: true });\n    });\n\n    this.state.ros.on(\"close\", () => {\n      console.log(\"connection is closed!\");\n      this.setState({ connected: false });\n      //try to reconnect every 3 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\n            \"ws://\" +\n              Config.ROSBRIDGE_SERVER_IP +\n              \":\" +\n              Config.ROSBRIDGE_SERVER_PORT +\n              \"\"\n          );\n        } catch (error) {\n          console.log(\"connection problem \");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n    } catch (error) {\n      console.log(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n      console.log(\"connection problem \");\n    }\n  }\n\n  handleMove(event) {\n    console.log(\"handle move\");\n    //we need to create a ROS publisher on the topic cmd_vel\n    var cmd_vel = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: Config.CMD_VEL_TOPIC,\n      messageType: \"geometry_msgs/Twist\",\n    });\n    //we need to create a twist message to be to published to rosbridge\n    var twist = new window.ROSLIB.Message({\n      linear: {\n        x: event.y / 50,\n        y: 0,\n        z: 0,\n      },\n      angular: {\n        x: 0,\n        y: 0,\n        z: -event.x / 50,\n      },\n    });\n    //we need to publish the message on the cmd_vel topic\n    cmd_vel.publish(twist);\n  }\n  handleStop(event) {\n    console.log(\"handle stop\");\n    //we need to create a ROS publisher on the topic cmd_vel\n    var cmd_vel = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: Config.CMD_VEL_TOPIC,\n      messageType: \"geometry_msgs/Twist\",\n    });\n    //we need to create a twist message to be to published to rosbridge\n    var twist = new window.ROSLIB.Message({\n      linear: {\n        x: 0,\n        y: 0,\n        z: 0,\n      },\n      angular: {\n        x: 0,\n        y: 0,\n        z: 0,\n      },\n    });\n    //we need to publish the message on the cmd_vel topic\n    cmd_vel.publish(twist);\n  }\n\n  render() {\n    return (\n      <div>\n        <Joystick\n          size={100}\n          baseColor=\"#EEEEEE\"\n          stickColor=\"#BBBBBB\"\n          move={this.handleMove}\n          stop={this.handleStop}\n        ></Joystick>\n      </div>\n    );\n  }\n}\n\nexport default Teleoperation;\n","/home/minhtan/Documents/robotservices/src/components/SetGoal_1.jsx",["112","113","114","115"],"import React, { Component } from \"react\";\nimport { Row, Col, Container, Button } from \"react-bootstrap\";\n\nimport Config from \"../scripts/config\";\n\nclass SetGoal_1 extends Component {\n    state = { ros: null }\n\n    constructor() {\n        super()\n\n        this.init_connection()\n\n        this.sendCommand = this.sendCommand.bind(this)\n    }\n\n    init_connection() {\n        this.state.ros = new window.ROSLIB.Ros()\n        this.state.ros.on('connection', (e) => {\n            console.log(e)\n            this.setState({\n                ros: this.state.ros\n            })\n        })\n        try {\n            console.log('connect')\n            this.state.ros.connect(\n                \"ws://\" +\n                Config.ROSBRIDGE_SERVER_IP +\n                \":\" +\n                Config.ROSBRIDGE_SERVER_PORT +\n                \"\"\n            )\n\n\n            console.log(\"SetGoal_1 - Connected\")\n        } catch (error) {\n            console.log(\n                \"ws://\" +\n                Config.ROSBRIDGE_SERVER_IP +\n                \":\" +\n                Config.ROSBRIDGE_SERVER_PORT +\n                \"\"\n            )\n            console.log(\"SetGoal_1 - cannot connect to the WS robot. Try again after 1 second\");\n        }\n    }\n\n    sendCommand(event) {\n        console.log(\"SetGoal_1 sent command\")\n        console.log(this.state.ros)\n\n        const goal = new window.ROSLIB.Goal({\n            actionClient: new window.ROSLIB.ActionClient({\n                ros: this.state.ros,\n                serverName: '/move_base',\n                actionName: 'move_base_msgs/MoveBaseAction'\n            }),\n            goalMessage: {\n                target_pose: {\n                    header: {\n                        frame_id: 'map'  // Replace with the desired frame ID\n                    },\n                    pose: {\n                        position: {\n                            x: 0.0,  // Replace with the desired position\n                            y: 0.0,\n                            z: 0.0\n                        },\n                        orientation: {\n                            x: 0.0,\n                            y: 0.0,\n                            z: 0.0,\n                            w: 0.0\n                        }\n                    }\n                }\n            }\n        });\n\n        goal.send();\n        console.log('Goal 1 sent!');\n    }\n\n    render() {\n        return (\n            <div>\n                <Button onClick={this.sendCommand}>\n                    SET GOAL 1\n                </Button>\n            </div>\n        )\n    }\n}\n\nexport default SetGoal_1\n","/home/minhtan/Documents/robotservices/src/components/SetGoal_2.jsx",["116","117","118","119"],"import React, { Component } from \"react\";\nimport { Row, Col, Container, Button } from \"react-bootstrap\";\n\nimport Config from \"../scripts/config\"\n\nclass SetGoal_2 extends Component {\n    state = { ros: null }\n    constructor() {\n        super()\n\n        this.init_connection()\n\n        this.sendCommand = this.sendCommand.bind(this)\n    }\n\n\n    init_connection() {\n        this.state.ros  =  new window.ROSLIB.Ros()\n        this.state.ros.on('connection', (e)=> {\n            console.log(e)\n            this.setState({\n                ros: this.state.ros\n            })\n        })\n        try {\n            console.log('connect')\n            this.state.ros.connect(\n                \"ws://\" +\n                Config.ROSBRIDGE_SERVER_IP +\n                \":\" +\n                Config.ROSBRIDGE_SERVER_PORT +\n                \"\"\n            )\n        \n            \n            console.log(\"SetGoal_2 - Connected\")\n        } catch (error) {\n            console.log(\n                \"ws://\" +\n                Config.ROSBRIDGE_SERVER_IP +\n                \":\" +\n                Config.ROSBRIDGE_SERVER_PORT +\n                \"\"\n            )\n            console.log(\"SetGoal_2 - cannot connect to the WS robot. Try again after 1 second\");\n        }\n    }\n\n    sendCommand(event) {\n        console.log(\"SetGoal_2 sent command\")\n        console.log(this.state.ros)\n\n        // var cmdService = new window.ROSLIB.Service({\n        //     ros: this.state.ros,\n        //     name: '/setgoal/setgoal',\n        //     serviceType: 'setgoal/msgs'\n        // })\n\n        // var cmdService_test = new window.ROSLIB.Service({\n        //     ros: this.state.ros,\n        //     name: '/map_server',\n        //     serviceType: 'map_server/map_server'\n        // })\n\n        // var request = new window.ROSLIB.ServiceRequest({\n        //     package_name: 'map_server',\n        //     launch_file: 'map.yaml'\n        // })\n\n        // cmdService_test.callService(request, function(response) {\n        //     console.log('Service call: ', response);\n        // })\n\n        // const cmd = new window.ROSLIB.Topic({\n        //     ros: this.state.ros,\n        //     name: '/run_command',  // Replace with an appropriate topic name\n        //     messageType: 'std_msgs/String'\n        //   });\n\n        // const runCommand = new window.ROSLIB.Message({\n        //     data: 'rosrun your_package your_executable'  // Replace with your desired rosrun command\n        //   });\n\n        // cmd.publish(runCommand);\n\n        const goal = new window.ROSLIB.Goal({\n            actionClient: new window.ROSLIB.ActionClient({\n                ros: this.state.ros,\n                serverName: '/move_base',\n                actionName: 'move_base_msgs/MoveBaseAction'\n            }),\n            goalMessage: {\n                target_pose: {\n                    header: {\n                        frame_id: 'map'  // Replace with the desired frame ID\n                    },\n                    pose: {\n                        position: {\n                            x: 1.0,  // Replace with the desired position\n                            y: 2.0,\n                            z: 0.0\n                        },\n                        orientation: {\n                            x: 0.0,\n                            y: 0.0,\n                            z: 0.0,\n                            w: 1.0\n                        }\n                    }\n                }\n            }\n        });\n\n        goal.send();\n        console.log('Goal 2 sent!');\n    }\n\n    render() {\n        return (\n            <div>\n                <Button onClick={this.sendCommand}>\n                    SET GOAL 2\n                </Button>\n            </div>\n        )\n    }\n}\n\nexport default SetGoal_2\n","/home/minhtan/Documents/robotservices/src/components/HomeNavbar.jsx",[],"/home/minhtan/Documents/robotservices/src/components/ViewOrder.jsx",[],"/home/minhtan/Documents/robotservices/src/scripts/config.js",[],"/home/minhtan/Documents/robotservices/src/components/OrderDetail.jsx",[],"/home/minhtan/Documents/robotservices/src/components/OrderSuccess.jsx",["120","121","122","123","124","125","126"],"import { useHistory } from \"react-router-dom\";\nimport React, { useEffect, useState } from \"react\";\nimport { Row, Col, Container, Button, Form, Table } from \"react-bootstrap\";\n\nconst OrderSuccess = () => {\n    const history = useHistory()\n\n    const handleOrderAgain = async (event) => {\n        history.push('/newOrder')\n    }\n\n    return (\n        <div>\n            ORDER SUCCESSFULLY!\n            <div>\n                <Button type=\"submit\" onClick={(event) => handleOrderAgain(event)}>\n                    ORDER AGAIN\n                </Button>\n            </div>\n        </div>\n    )\n}\n\nexport default OrderSuccess",{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","severity":1,"message":"132","line":2,"column":10,"nodeType":"133","messageId":"134","endLine":2,"endColumn":19},{"ruleId":"131","severity":1,"message":"135","line":2,"column":21,"nodeType":"133","messageId":"134","endLine":2,"endColumn":27},{"ruleId":"131","severity":1,"message":"136","line":2,"column":29,"nodeType":"133","messageId":"134","endLine":2,"endColumn":32},{"ruleId":"137","severity":1,"message":"138","line":47,"column":15,"nodeType":"139","messageId":"140","endLine":47,"endColumn":28},{"ruleId":"137","severity":1,"message":"141","line":48,"column":15,"nodeType":"139","messageId":"140","endLine":48,"endColumn":28},{"ruleId":"131","severity":1,"message":"142","line":3,"column":26,"nodeType":"133","messageId":"134","endLine":3,"endColumn":31},{"ruleId":"143","severity":1,"message":"144","line":13,"column":5,"nodeType":"145","messageId":"146","endLine":13,"endColumn":15},{"ruleId":"131","severity":1,"message":"132","line":2,"column":20,"nodeType":"133","messageId":"134","endLine":2,"endColumn":29},{"ruleId":"131","severity":1,"message":"147","line":2,"column":31,"nodeType":"133","messageId":"134","endLine":2,"endColumn":37},{"ruleId":"143","severity":1,"message":"144","line":22,"column":5,"nodeType":"145","messageId":"146","endLine":22,"endColumn":15},{"ruleId":"143","severity":1,"message":"144","line":17,"column":5,"nodeType":"145","messageId":"146","endLine":17,"endColumn":15},{"ruleId":"131","severity":1,"message":"148","line":51,"column":9,"nodeType":"133","messageId":"134","endLine":51,"endColumn":18},{"ruleId":"143","severity":1,"message":"144","line":16,"column":5,"nodeType":"145","messageId":"146","endLine":16,"endColumn":15},{"ruleId":"131","severity":1,"message":"149","line":2,"column":10,"nodeType":"133","messageId":"134","endLine":2,"endColumn":13},{"ruleId":"131","severity":1,"message":"150","line":2,"column":15,"nodeType":"133","messageId":"134","endLine":2,"endColumn":18},{"ruleId":"131","severity":1,"message":"132","line":2,"column":20,"nodeType":"133","messageId":"134","endLine":2,"endColumn":29},{"ruleId":"143","severity":1,"message":"144","line":18,"column":9,"nodeType":"145","messageId":"146","endLine":18,"endColumn":19},{"ruleId":"131","severity":1,"message":"149","line":2,"column":10,"nodeType":"133","messageId":"134","endLine":2,"endColumn":13},{"ruleId":"131","severity":1,"message":"150","line":2,"column":15,"nodeType":"133","messageId":"134","endLine":2,"endColumn":18},{"ruleId":"131","severity":1,"message":"132","line":2,"column":20,"nodeType":"133","messageId":"134","endLine":2,"endColumn":29},{"ruleId":"143","severity":1,"message":"144","line":18,"column":9,"nodeType":"145","messageId":"146","endLine":18,"endColumn":19},{"ruleId":"131","severity":1,"message":"151","line":2,"column":17,"nodeType":"133","messageId":"134","endLine":2,"endColumn":26},{"ruleId":"131","severity":1,"message":"152","line":2,"column":28,"nodeType":"133","messageId":"134","endLine":2,"endColumn":36},{"ruleId":"131","severity":1,"message":"149","line":3,"column":10,"nodeType":"133","messageId":"134","endLine":3,"endColumn":13},{"ruleId":"131","severity":1,"message":"150","line":3,"column":15,"nodeType":"133","messageId":"134","endLine":3,"endColumn":18},{"ruleId":"131","severity":1,"message":"132","line":3,"column":20,"nodeType":"133","messageId":"134","endLine":3,"endColumn":29},{"ruleId":"131","severity":1,"message":"153","line":3,"column":39,"nodeType":"133","messageId":"134","endLine":3,"endColumn":43},{"ruleId":"131","severity":1,"message":"154","line":3,"column":45,"nodeType":"133","messageId":"134","endLine":3,"endColumn":50},"no-native-reassign",["155"],"no-negated-in-lhs",["156"],"no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","'Navbar' is defined but never used.","'Nav' is defined but never used.","react/jsx-pascal-case","Imported JSX component SetGoal_1 must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","Imported JSX component SetGoal_2 must be in PascalCase or SCREAMING_SNAKE_CASE","'toast' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","noDirectMutation","'Button' is defined but never used.","'navClient' is assigned a value but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'Form' is defined but never used.","'Table' is defined but never used.","no-global-assign","no-unsafe-negation"]