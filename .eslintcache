[{"/home/minhtan/Documents/robotservices/src/index.js":"1","/home/minhtan/Documents/robotservices/src/reportWebVitals.js":"2","/home/minhtan/Documents/robotservices/src/App.js":"3","/home/minhtan/Documents/robotservices/src/components/Header.jsx":"4","/home/minhtan/Documents/robotservices/src/components/Body.jsx":"5","/home/minhtan/Documents/robotservices/src/components/Home.jsx":"6","/home/minhtan/Documents/robotservices/src/components/TestDataBase.jsx":"7","/home/minhtan/Documents/robotservices/src/components/About.jsx":"8","/home/minhtan/Documents/robotservices/src/components/Order.jsx":"9","/home/minhtan/Documents/robotservices/src/components/Drink.jsx":"10","/home/minhtan/Documents/robotservices/src/components/Connection.jsx":"11","/home/minhtan/Documents/robotservices/src/components/RobotState.jsx":"12","/home/minhtan/Documents/robotservices/src/components/Map.jsx":"13","/home/minhtan/Documents/robotservices/src/components/Teleoperation.jsx":"14","/home/minhtan/Documents/robotservices/src/components/SetGoal_1.jsx":"15","/home/minhtan/Documents/robotservices/src/components/SetGoal_2.jsx":"16","/home/minhtan/Documents/robotservices/src/components/HomeNavbar.jsx":"17","/home/minhtan/Documents/robotservices/src/components/ViewOrder.jsx":"18","/home/minhtan/Documents/robotservices/src/scripts/config.js":"19","/home/minhtan/Documents/robotservices/src/components/OrderDetail.jsx":"20","/home/minhtan/Documents/robotservices/src/components/OrderSuccess.jsx":"21","/home/minhtan/Documents/robotservices/src/components/CurrentOrder.jsx":"22","/home/minhtan/Documents/robotservices/src/components/SetGoal_3.jsx":"23","/home/minhtan/Documents/robotservices/src/components/SetGoal_4.jsx":"24","/home/minhtan/Documents/robotservices/src/components/SetGoal_5.jsx":"25","/home/minhtan/Documents/robotservices/src/socket.js":"26"},{"size":660,"mtime":1687185290000,"results":"27","hashOfConfig":"28"},{"size":362,"mtime":1687020422000,"results":"29","hashOfConfig":"28"},{"size":328,"mtime":1689260462621,"results":"30","hashOfConfig":"28"},{"size":813,"mtime":1687591994317,"results":"31","hashOfConfig":"28"},{"size":1068,"mtime":1687972433173,"results":"32","hashOfConfig":"28"},{"size":3975,"mtime":1690024028909,"results":"33","hashOfConfig":"28"},{"size":997,"mtime":1687596047698,"results":"34","hashOfConfig":"28"},{"size":324,"mtime":1687020422000,"results":"35","hashOfConfig":"28"},{"size":8699,"mtime":1690024746904,"results":"36","hashOfConfig":"28"},{"size":1451,"mtime":1687595278106,"results":"37","hashOfConfig":"28"},{"size":1901,"mtime":1690022947477,"results":"38","hashOfConfig":"28"},{"size":4361,"mtime":1689359787189,"results":"39","hashOfConfig":"28"},{"size":1591,"mtime":1690023915526,"results":"40","hashOfConfig":"28"},{"size":3149,"mtime":1687678413804,"results":"41","hashOfConfig":"28"},{"size":2873,"mtime":1690022929069,"results":"42","hashOfConfig":"28"},{"size":2784,"mtime":1689432742562,"results":"43","hashOfConfig":"28"},{"size":1001,"mtime":1690024330560,"results":"44","hashOfConfig":"28"},{"size":2435,"mtime":1689432112846,"results":"45","hashOfConfig":"28"},{"size":304,"mtime":1689436599824,"results":"46","hashOfConfig":"28"},{"size":1862,"mtime":1687685359920,"results":"47","hashOfConfig":"28"},{"size":1257,"mtime":1690023871945,"results":"48","hashOfConfig":"28"},{"size":3991,"mtime":1690023696579,"results":"49","hashOfConfig":"28"},{"size":2757,"mtime":1689262923428,"results":"50","hashOfConfig":"28"},{"size":2869,"mtime":1689262937513,"results":"51","hashOfConfig":"28"},{"size":2873,"mtime":1689262955901,"results":"52","hashOfConfig":"28"},{"size":105,"mtime":1688573722973,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"wg1h7d",{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"56"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"56"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"56"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"56"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"56"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"56"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"/home/minhtan/Documents/robotservices/src/index.js",[],["115","116"],"/home/minhtan/Documents/robotservices/src/reportWebVitals.js",[],"/home/minhtan/Documents/robotservices/src/App.js",["117","118","119","120"],"import Header from \"./components/Header\";\nimport Body from \"./components/Body\";\n\nimport React, { useState, useEffect } from \"react\";\nimport { socket } from \"./socket\";\nimport io from 'socket.io-client'\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Body></Body>\n    </div>\n  );\n}\n\n","/home/minhtan/Documents/robotservices/src/components/Header.jsx",["121","122","123"],"import React, { Component } from \"react\";\nimport { Container, Navbar, Nav } from \"react-bootstrap\";\nclass Header extends Component {\n  render() {\n    return (\n      // <Container>\n      //   <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" collapseOnSelect>\n      //     <Navbar.Brand href=\"#home\">React ROS Robot</Navbar.Brand>\n      //     <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      //     <Navbar.Collapse id=\"basic-navbar-nav\">\n      //       <Nav className=\"mr-auto\">\n      //         <Nav.Link href=\"/\">Home</Nav.Link>\n      //         <Nav.Link href=\"/about\">About</Nav.Link>\n      //         <Nav.Link href=\"/testDataBase\">Database</Nav.Link>\n      //       </Nav>\n      //     </Navbar.Collapse>\n      //   </Navbar>\n      // </Container>\n      <div></div>\n    );\n  }\n}\n\nexport default Header;\n","/home/minhtan/Documents/robotservices/src/components/Body.jsx",[],"/home/minhtan/Documents/robotservices/src/components/Home.jsx",["124","125","126","127","128","129","130","131"],"/home/minhtan/Documents/robotservices/src/components/TestDataBase.jsx",[],"/home/minhtan/Documents/robotservices/src/components/About.jsx",[],"/home/minhtan/Documents/robotservices/src/components/Order.jsx",["132","133","134"],"/home/minhtan/Documents/robotservices/src/components/Drink.jsx",[],"/home/minhtan/Documents/robotservices/src/components/Connection.jsx",["135"],"/home/minhtan/Documents/robotservices/src/components/RobotState.jsx",["136","137","138","139","140","141","142"],"import React, { Component } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { Row, Col, Container, Button } from \"react-bootstrap\";\nimport Config from \"../scripts/config\";\nimport * as Three from \"three\";\n\nimport { toast } from \"react-toastify\"\nimport io from \"socket.io-client\"\n\nclass RobotState extends Component {\n  state = {\n    ros: null,\n    x: 0,\n    y: 0,\n    orientation: 0,\n    linear_velocity: 0,\n    angular_velocity: 0,\n  };\n\n  constructor() {\n    super();\n    this.init_connection();\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(this.state.ros);\n\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"connection established in Teleoperation Component!\");\n      console.log(this.state.ros);\n      this.setState({ connected: true });\n    });\n\n    this.state.ros.on(\"close\", () => {\n      console.log(\"connection is closed!\");\n      this.setState({ connected: false });\n      //try to reconnect every 3 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\n            \"ws://\" +\n            Config.ROSBRIDGE_SERVER_IP +\n            \":\" +\n            Config.ROSBRIDGE_SERVER_PORT +\n            \"\"\n          );\n        } catch (error) {\n          console.log(\"connection problem \");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n        Config.ROSBRIDGE_SERVER_IP +\n        \":\" +\n        Config.ROSBRIDGE_SERVER_PORT +\n        \"\"\n      );\n    } catch (error) {\n      console.log(\n        \"ws://\" +\n        Config.ROSBRIDGE_SERVER_IP +\n        \":\" +\n        Config.ROSBRIDGE_SERVER_PORT +\n        \"\"\n      );\n      console.log(\"connection problem \");\n    }\n  }\n\n  componentDidMount() {\n    this.getRobotState();\n    this.getState()\n  }\n\n  getRobotState() {\n    //create a pose subscriber\n    var pose_subscriber = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: Config.POSE_TOPIC,\n      messageType: \"geometry_msgs/PoseWithCovarianceStamped\",\n    });\n\n    //create a pose callback\n    pose_subscriber.subscribe((message) => {\n      this.setState({ x: message.pose.pose.position.x.toFixed(2) });\n      this.setState({ y: message.pose.pose.position.y.toFixed(2) });\n      this.setState({\n        orientation: this.getOrientationFromQuaternion(\n          message.pose.pose.orientation\n        ).toFixed(2),\n      });\n    });\n\n    //create a subscriber for the velocities in the odom topic\n    var velocity_subscriber = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: Config.ODOM_TOPIC,\n      messageType: \"nav_msgs/Odometry\",\n    });\n\n    //callback function for the odom\n    velocity_subscriber.subscribe((message) => {\n      this.setState({\n        linear_velocity: message.twist.twist.linear.x.toFixed(2),\n      });\n      this.setState({\n        angular_velocity: message.twist.twist.angular.z.toFixed(2),\n      });\n    });\n  }\n\n  getOrientationFromQuaternion(ros_orientation_quaternion) {\n    var q = new Three.Quaternion(\n      ros_orientation_quaternion.x,\n      ros_orientation_quaternion.y,\n      ros_orientation_quaternion.z,\n      ros_orientation_quaternion.w\n    );\n    //convert this quaternion into Roll, Pitch and Yaw\n    var RPY = new Three.Euler().setFromQuaternion(q);\n\n    return RPY[\"_z\"] * (180 / Math.PI);\n  }\n\n  getState() {\n\n    const socket = io(\"https://socket-robot-sv.onrender.com/\", {\n    transports: ['websocket'],\n  })\n\n    var status = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: 'move_base/result',\n      messageType: \"move_base_msgs/MoveBaseActionResult\"\n    })\n\n    status.subscribe((message) => {\n      console.log(message)\n      toast.success(\"GOAL REACHED\", {\n        position: toast.POSITION.TOP_CENTER\n      })\n    })\n\n    socket.emit('GOAL_REACHED')\n  }\n\n  render() {\n    return (\n      <div>\n        {/* <h4>Position</h4>\n        <p className=\"mt-0\">x: {this.state.x}</p>\n        <p className=\"mt-0\">y: {this.state.y}</p>\n        <p className=\"mt-0\">Orientation: {this.state.orientation}</p>\n\n        <h4 className=\"mt-4\">Velocities</h4>\n        <p className=\"mt-0\">\n          Linear Velocity: {this.state.linear_velocity}\n        </p>\n        <p className=\"mt-0\">\n          Angular Velocity: {this.state.angular_velocity}\n        </p>  */}\n      </div>\n    );\n  }\n}\n\nexport default RobotState;\n","/home/minhtan/Documents/robotservices/src/components/Map.jsx",["143","144"],"/home/minhtan/Documents/robotservices/src/components/Teleoperation.jsx",["145"],"import React, { Component } from \"react\";\nimport { Joystick } from \"react-joystick-component\";\nimport Config from \"../scripts/config\";\n\nclass Teleoperation extends Component {\n  state = { ros: null };\n\n  constructor() {\n    super();\n    this.init_connection();\n\n    this.handleMove = this.handleMove.bind(this);\n    this.handleStop = this.handleStop.bind(this);\n  }\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(this.state.ros);\n\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"connection established in Teleoperation Component!\");\n      console.log(this.state.ros);\n      this.setState({ connected: true });\n    });\n\n    this.state.ros.on(\"close\", () => {\n      console.log(\"connection is closed!\");\n      this.setState({ connected: false });\n      //try to reconnect every 3 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\n            \"ws://\" +\n              Config.ROSBRIDGE_SERVER_IP +\n              \":\" +\n              Config.ROSBRIDGE_SERVER_PORT +\n              \"\"\n          );\n        } catch (error) {\n          console.log(\"connection problem \");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n    } catch (error) {\n      console.log(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n      console.log(\"connection problem \");\n    }\n  }\n\n  handleMove(event) {\n    console.log(\"handle move\");\n    //we need to create a ROS publisher on the topic cmd_vel\n    var cmd_vel = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: Config.CMD_VEL_TOPIC,\n      messageType: \"geometry_msgs/Twist\",\n    });\n    //we need to create a twist message to be to published to rosbridge\n    var twist = new window.ROSLIB.Message({\n      linear: {\n        x: event.y / 50,\n        y: 0,\n        z: 0,\n      },\n      angular: {\n        x: 0,\n        y: 0,\n        z: -event.x / 50,\n      },\n    });\n    //we need to publish the message on the cmd_vel topic\n    cmd_vel.publish(twist);\n  }\n  handleStop(event) {\n    console.log(\"handle stop\");\n    //we need to create a ROS publisher on the topic cmd_vel\n    var cmd_vel = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: Config.CMD_VEL_TOPIC,\n      messageType: \"geometry_msgs/Twist\",\n    });\n    //we need to create a twist message to be to published to rosbridge\n    var twist = new window.ROSLIB.Message({\n      linear: {\n        x: 0,\n        y: 0,\n        z: 0,\n      },\n      angular: {\n        x: 0,\n        y: 0,\n        z: 0,\n      },\n    });\n    //we need to publish the message on the cmd_vel topic\n    cmd_vel.publish(twist);\n  }\n\n  render() {\n    return (\n      <div>\n        <Joystick\n          size={100}\n          baseColor=\"#EEEEEE\"\n          stickColor=\"#BBBBBB\"\n          move={this.handleMove}\n          stop={this.handleStop}\n        ></Joystick>\n      </div>\n    );\n  }\n}\n\nexport default Teleoperation;\n","/home/minhtan/Documents/robotservices/src/components/SetGoal_1.jsx",["146"],"/home/minhtan/Documents/robotservices/src/components/SetGoal_2.jsx",["147"],"import React, { Component } from \"react\";\nimport { Button } from \"react-bootstrap\";\n\nimport Config from \"../scripts/config\"\nimport { toast } from \"react-toastify\";\n\nclass SetGoal_2 extends Component {\n    state = { ros: null,\n                x: 0,\n                y: 0 }\n    constructor() {\n        super()\n\n        this.init_connection()\n\n        this.sendCommand = this.sendCommand.bind(this)\n    }\n\n\n    init_connection() {\n        this.state.ros = new window.ROSLIB.Ros()\n        this.state.ros.on('connection', (e) => {\n            console.log(e)\n            this.setState({\n                ros: this.state.ros\n            })\n        })\n        try {\n            console.log('connect')\n            this.state.ros.connect(\n                \"ws://\" +\n                Config.ROSBRIDGE_SERVER_IP +\n                \":\" +\n                Config.ROSBRIDGE_SERVER_PORT +\n                \"\"\n            )\n\n\n            console.log(\"SetGoal_2 - Connected\")\n        } catch (error) {\n            console.log(\n                \"ws://\" +\n                Config.ROSBRIDGE_SERVER_IP +\n                \":\" +\n                Config.ROSBRIDGE_SERVER_PORT +\n                \"\"\n            )\n            console.log(\"SetGoal_2 - cannot connect to the WS robot. Try again after 1 second\");\n        }\n    }\n\n    sendCommand(event) {\n        console.log(\"SetGoal_2 sent command\")\n        console.log(this.state.ros)\n\n        const goal = new window.ROSLIB.Goal({\n            actionClient: new window.ROSLIB.ActionClient({\n                ros: this.state.ros,\n                serverName: '/move_base',\n                actionName: 'move_base_msgs/MoveBaseAction'\n            }),\n            goalMessage: {\n                target_pose: {\n                    header: {\n                        frame_id: 'map'  // Replace with the desired frame ID\n                    },\n                    pose: {\n                        position: {\n                            x: 1.88,  // Replace with the desired position\n                            y: -1.64,\n                            z: 0.0\n                        },\n                        orientation: {\n                            x: 0.0,\n                            y: 0.0,\n                            z: 0.0,\n                            w: 1.0\n                        }\n                    }\n                }\n            }\n        });\n\n        goal.send();\n        console.log('Moving to table 1 ...');\n\n        toast.success('ROBOT IS MOVING TO TABLE 1', {\n            position: toast.POSITION.TOP_RIGHT\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <Button onClick={this.sendCommand} variant=\"success\">\n                    TABLE 1\n                </Button>\n            </div>\n        )\n    }\n}\n\nexport default SetGoal_2\n","/home/minhtan/Documents/robotservices/src/components/HomeNavbar.jsx",[],"/home/minhtan/Documents/robotservices/src/components/ViewOrder.jsx",[],"/home/minhtan/Documents/robotservices/src/scripts/config.js",[],"/home/minhtan/Documents/robotservices/src/components/OrderDetail.jsx",[],"/home/minhtan/Documents/robotservices/src/components/OrderSuccess.jsx",["148","149","150","151","152"],"/home/minhtan/Documents/robotservices/src/components/CurrentOrder.jsx",["153","154","155","156","157","158","159"],"/home/minhtan/Documents/robotservices/src/components/SetGoal_3.jsx",["160","161","162","163"],"import React, { Component } from \"react\";\nimport { Row, Col, Container, Button } from \"react-bootstrap\";\nimport { toast } from \"react-toastify\"\n\nimport Config from \"../scripts/config\"\n\nclass SetGoal_3 extends Component {\n    state = { ros: null }\n    constructor() {\n        super()\n\n        this.init_connection()\n\n        this.sendCommand = this.sendCommand.bind(this)\n    }\n\n\n    init_connection() {\n        this.state.ros = new window.ROSLIB.Ros()\n        this.state.ros.on('connection', (e) => {\n            console.log(e)\n            this.setState({\n                ros: this.state.ros\n            })\n        })\n        try {\n            console.log('connect')\n            this.state.ros.connect(\n                \"ws://\" +\n                Config.ROSBRIDGE_SERVER_IP +\n                \":\" +\n                Config.ROSBRIDGE_SERVER_PORT +\n                \"\"\n            )\n\n            console.log(\"SetGoal_3 - Connected\")\n        } catch (error) {\n            console.log(\n                \"ws://\" +\n                Config.ROSBRIDGE_SERVER_IP +\n                \":\" +\n                Config.ROSBRIDGE_SERVER_PORT +\n                \"\"\n            )\n            console.log(\"SetGoal_3 - cannot connect to the WS robot. Try again after 1 second\");\n        }\n    }\n\n    sendCommand(event) {\n        console.log(\"SetGoal_3 sent command\")\n        console.log(this.state.ros)\n\n        const goal = new window.ROSLIB.Goal({\n            actionClient: new window.ROSLIB.ActionClient({\n                ros: this.state.ros,\n                serverName: '/move_base',\n                actionName: 'move_base_msgs/MoveBaseAction'\n            }),\n            goalMessage: {\n                target_pose: {\n                    header: {\n                        frame_id: 'map'  // Replace with the desired frame ID\n                    },\n                    pose: {\n                        position: {\n                            x: -2.0,  // Replace with the desired position\n                            y: 1.0,\n                            z: 0.0\n                        },\n                        orientation: {\n                            x: 0.0,\n                            y: 0.0,\n                            z: 0.0,\n                            w: 1.0\n                        }\n                    }\n                }\n            }\n        });\n\n        goal.send();\n        console.log('Moving to table 2 ...');\n\n        toast.success('ROBOT IS MOVING TO TABLE 2', {\n            position: toast.POSITION.TOP_RIGHT\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <Button onClick={this.sendCommand} variant=\"success\">\n                    TABLE 2\n                </Button>\n            </div>\n        )\n    }\n}\n\nexport default SetGoal_3\n","/home/minhtan/Documents/robotservices/src/components/SetGoal_4.jsx",["164"],"import React, { Component } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { toast } from \"react-toastify\";\n\nimport Config from \"../scripts/config\"\n\nclass SetGoal_4 extends Component {\n    state = { ros: null }\n    constructor() {\n        super()\n\n        this.init_connection()\n\n        this.sendCommand = this.sendCommand.bind(this)\n    }\n\n\n    init_connection() {\n        this.state.ros = new window.ROSLIB.Ros()\n        this.state.ros.on('connection', (e) => {\n            console.log(e)\n            this.setState({\n                ros: this.state.ros\n            })\n        })\n        try {\n            console.log('connect')\n            this.state.ros.connect(\n                \"ws://\" +\n                Config.ROSBRIDGE_SERVER_IP +\n                \":\" +\n                Config.ROSBRIDGE_SERVER_PORT +\n                \"\"\n            )\n\n\n            console.log(\"SetGoal_4 - Connected\")\n        } catch (error) {\n            console.log(\n                \"ws://\" +\n                Config.ROSBRIDGE_SERVER_IP +\n                \":\" +\n                Config.ROSBRIDGE_SERVER_PORT +\n                \"\"\n            )\n            console.log(\"SetGoal_4 - cannot connect to the WS robot. Try again after 1 second\");\n        }\n    }\n\n    sendCommand(event) {\n        console.log(\"SetGoal_4 sent command\")\n        console.log(this.state.ros)\n\n        const goal = new window.ROSLIB.Goal({\n            actionClient: new window.ROSLIB.ActionClient({\n                ros: this.state.ros,\n                serverName: '/move_base',\n                actionName: 'move_base_msgs/MoveBaseAction'\n            }),\n            goalMessage: {\n                target_pose: {\n                    header: {\n                        frame_id: 'map'  // Replace with the desired frame ID\n                    },\n                    pose: {\n                        position: {\n                            x: 2.0,  // Replace with the desired position\n                            y: 2.0,\n                            z: 0.0\n                        },\n                        orientation: {\n                            x: 0.0,\n                            y: 0.0,\n                            z: 0.0,\n                            w: 1.0\n                        }\n                    }\n                }\n            }\n        });\n\n        goal.send();\n        console.log('Moving to table 3');\n\n        toast.success('ROBOT IS MOVING TO TABLE 3', {\n            position: toast.POSITION.TOP_RIGHT\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <Button onClick={this.sendCommand} variant=\"success\"\n                    style={{\n                        position: \"relative\",\n                        float: \"left\"\n                    }}>\n                    TABLE 3\n                </Button>\n            </div>\n        )\n    }\n}\n\nexport default SetGoal_4\n","/home/minhtan/Documents/robotservices/src/components/SetGoal_5.jsx",["165"],"import React, { Component } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { toast } from \"react-toastify\";\n\nimport Config from \"../scripts/config\"\n\nclass SetGoal_5 extends Component {\n    state = { ros: null }\n    constructor() {\n        super()\n\n        this.init_connection()\n\n        this.sendCommand = this.sendCommand.bind(this)\n    }\n\n\n    init_connection() {\n        this.state.ros = new window.ROSLIB.Ros()\n        this.state.ros.on('connection', (e) => {\n            console.log(e)\n            this.setState({\n                ros: this.state.ros\n            })\n        })\n        try {\n            console.log('connect')\n            this.state.ros.connect(\n                \"ws://\" +\n                Config.ROSBRIDGE_SERVER_IP +\n                \":\" +\n                Config.ROSBRIDGE_SERVER_PORT +\n                \"\"\n            )\n\n\n            console.log(\"SetGoal_5 - Connected\")\n        } catch (error) {\n            console.log(\n                \"ws://\" +\n                Config.ROSBRIDGE_SERVER_IP +\n                \":\" +\n                Config.ROSBRIDGE_SERVER_PORT +\n                \"\"\n            )\n            console.log(\"SetGoal_5 - cannot connect to the WS robot. Try again after 1 second\");\n        }\n    }\n\n    sendCommand(event) {\n        console.log(\"SetGoal_5 sent command\")\n        console.log(this.state.ros)\n\n        const goal = new window.ROSLIB.Goal({\n            actionClient: new window.ROSLIB.ActionClient({\n                ros: this.state.ros,\n                serverName: '/move_base',\n                actionName: 'move_base_msgs/MoveBaseAction'\n            }),\n            goalMessage: {\n                target_pose: {\n                    header: {\n                        frame_id: 'map'  // Replace with the desired frame ID\n                    },\n                    pose: {\n                        position: {\n                            x: 2.0,  // Replace with the desired position\n                            y: 1.0,\n                            z: 0.0\n                        },\n                        orientation: {\n                            x: 0.0,\n                            y: 0.0,\n                            z: 0.0,\n                            w: 1.0\n                        }\n                    }\n                }\n            }\n        });\n\n        goal.send();\n        console.log('Moving to table 4 ...');\n\n        toast.success('ROBOT IS MOVING TO TABLE 4', {\n            position: toast.POSITION.TOP_RIGHT\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <Button onClick={this.sendCommand} variant=\"success\"\n                    style={{\n                        position: \"relative\",\n                        float: \"left\"\n                    }}>\n                    TABLE 4\n                </Button>\n            </div>\n        )\n    }\n}\n\nexport default SetGoal_5\n","/home/minhtan/Documents/robotservices/src/socket.js",[],{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","replacedBy":"169"},{"ruleId":"170","severity":1,"message":"171","line":4,"column":17,"nodeType":"172","messageId":"173","endLine":4,"endColumn":25},{"ruleId":"170","severity":1,"message":"174","line":4,"column":27,"nodeType":"172","messageId":"173","endLine":4,"endColumn":36},{"ruleId":"170","severity":1,"message":"175","line":5,"column":10,"nodeType":"172","messageId":"173","endLine":5,"endColumn":16},{"ruleId":"170","severity":1,"message":"176","line":6,"column":8,"nodeType":"172","messageId":"173","endLine":6,"endColumn":10},{"ruleId":"170","severity":1,"message":"177","line":2,"column":10,"nodeType":"172","messageId":"173","endLine":2,"endColumn":19},{"ruleId":"170","severity":1,"message":"178","line":2,"column":21,"nodeType":"172","messageId":"173","endLine":2,"endColumn":27},{"ruleId":"170","severity":1,"message":"179","line":2,"column":29,"nodeType":"172","messageId":"173","endLine":2,"endColumn":32},{"ruleId":"170","severity":1,"message":"171","line":18,"column":10,"nodeType":"172","messageId":"173","endLine":18,"endColumn":18},{"ruleId":"170","severity":1,"message":"174","line":18,"column":20,"nodeType":"172","messageId":"173","endLine":18,"endColumn":29},{"ruleId":"170","severity":1,"message":"180","line":44,"column":11,"nodeType":"172","messageId":"173","endLine":44,"endColumn":19},{"ruleId":"181","severity":1,"message":"182","line":69,"column":27,"nodeType":"183","messageId":"184","endLine":69,"endColumn":40},{"ruleId":"181","severity":1,"message":"185","line":72,"column":27,"nodeType":"183","messageId":"184","endLine":72,"endColumn":40},{"ruleId":"181","severity":1,"message":"186","line":75,"column":27,"nodeType":"183","messageId":"184","endLine":75,"endColumn":40},{"ruleId":"181","severity":1,"message":"187","line":78,"column":27,"nodeType":"183","messageId":"184","endLine":78,"endColumn":40},{"ruleId":"181","severity":1,"message":"188","line":83,"column":27,"nodeType":"183","messageId":"184","endLine":83,"endColumn":40},{"ruleId":"170","severity":1,"message":"189","line":2,"column":45,"nodeType":"172","messageId":"173","endLine":2,"endColumn":50},{"ruleId":"170","severity":1,"message":"190","line":3,"column":26,"nodeType":"172","messageId":"173","endLine":3,"endColumn":31},{"ruleId":"170","severity":1,"message":"191","line":4,"column":10,"nodeType":"172","messageId":"173","endLine":4,"endColumn":14},{"ruleId":"192","severity":1,"message":"193","line":13,"column":5,"nodeType":"194","messageId":"195","endLine":13,"endColumn":15},{"ruleId":"170","severity":1,"message":"174","line":2,"column":10,"nodeType":"172","messageId":"173","endLine":2,"endColumn":19},{"ruleId":"170","severity":1,"message":"171","line":2,"column":21,"nodeType":"172","messageId":"173","endLine":2,"endColumn":29},{"ruleId":"170","severity":1,"message":"196","line":3,"column":10,"nodeType":"172","messageId":"173","endLine":3,"endColumn":13},{"ruleId":"170","severity":1,"message":"197","line":3,"column":15,"nodeType":"172","messageId":"173","endLine":3,"endColumn":18},{"ruleId":"170","severity":1,"message":"177","line":3,"column":20,"nodeType":"172","messageId":"173","endLine":3,"endColumn":29},{"ruleId":"170","severity":1,"message":"198","line":3,"column":31,"nodeType":"172","messageId":"173","endLine":3,"endColumn":37},{"ruleId":"192","severity":1,"message":"193","line":26,"column":5,"nodeType":"194","messageId":"195","endLine":26,"endColumn":15},{"ruleId":"192","severity":1,"message":"193","line":17,"column":5,"nodeType":"194","messageId":"195","endLine":17,"endColumn":15},{"ruleId":"170","severity":1,"message":"199","line":51,"column":9,"nodeType":"172","messageId":"173","endLine":51,"endColumn":18},{"ruleId":"192","severity":1,"message":"193","line":16,"column":5,"nodeType":"194","messageId":"195","endLine":16,"endColumn":15},{"ruleId":"192","severity":1,"message":"193","line":19,"column":9,"nodeType":"194","messageId":"195","endLine":19,"endColumn":19},{"ruleId":"192","severity":1,"message":"193","line":21,"column":9,"nodeType":"194","messageId":"195","endLine":21,"endColumn":19},{"ruleId":"170","severity":1,"message":"174","line":2,"column":17,"nodeType":"172","messageId":"173","endLine":2,"endColumn":26},{"ruleId":"170","severity":1,"message":"171","line":2,"column":28,"nodeType":"172","messageId":"173","endLine":2,"endColumn":36},{"ruleId":"170","severity":1,"message":"177","line":3,"column":20,"nodeType":"172","messageId":"173","endLine":3,"endColumn":29},{"ruleId":"170","severity":1,"message":"200","line":3,"column":39,"nodeType":"172","messageId":"173","endLine":3,"endColumn":43},{"ruleId":"170","severity":1,"message":"189","line":3,"column":45,"nodeType":"172","messageId":"173","endLine":3,"endColumn":50},{"ruleId":"170","severity":1,"message":"201","line":3,"column":10,"nodeType":"172","messageId":"173","endLine":3,"endColumn":15},{"ruleId":"170","severity":1,"message":"197","line":3,"column":30,"nodeType":"172","messageId":"173","endLine":3,"endColumn":33},{"ruleId":"170","severity":1,"message":"196","line":3,"column":35,"nodeType":"172","messageId":"173","endLine":3,"endColumn":38},{"ruleId":"170","severity":1,"message":"198","line":3,"column":40,"nodeType":"172","messageId":"173","endLine":3,"endColumn":46},{"ruleId":"170","severity":1,"message":"202","line":4,"column":8,"nodeType":"172","messageId":"173","endLine":4,"endColumn":17},{"ruleId":"170","severity":1,"message":"180","line":52,"column":11,"nodeType":"172","messageId":"173","endLine":52,"endColumn":19},{"ruleId":"203","severity":1,"message":"204","line":74,"column":25,"nodeType":"205","messageId":"206","endLine":74,"endColumn":37},{"ruleId":"170","severity":1,"message":"196","line":2,"column":10,"nodeType":"172","messageId":"173","endLine":2,"endColumn":13},{"ruleId":"170","severity":1,"message":"197","line":2,"column":15,"nodeType":"172","messageId":"173","endLine":2,"endColumn":18},{"ruleId":"170","severity":1,"message":"177","line":2,"column":20,"nodeType":"172","messageId":"173","endLine":2,"endColumn":29},{"ruleId":"192","severity":1,"message":"193","line":19,"column":9,"nodeType":"194","messageId":"195","endLine":19,"endColumn":19},{"ruleId":"192","severity":1,"message":"193","line":19,"column":9,"nodeType":"194","messageId":"195","endLine":19,"endColumn":19},{"ruleId":"192","severity":1,"message":"193","line":19,"column":9,"nodeType":"194","messageId":"195","endLine":19,"endColumn":19},"no-native-reassign",["207"],"no-negated-in-lhs",["208"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'socket' is defined but never used.","'io' is defined but never used.","'Container' is defined but never used.","'Navbar' is defined but never used.","'Nav' is defined but never used.","'cusStyle' is assigned a value but never used.","react/jsx-pascal-case","Imported JSX component SetGoal_2 must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","Imported JSX component SetGoal_3 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component SetGoal_4 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component SetGoal_5 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component SetGoal_1 must be in PascalCase or SCREAMING_SNAKE_CASE","'Table' is defined but never used.","'toast' is defined but never used.","'Link' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","noDirectMutation","'Row' is defined but never used.","'Col' is defined but never used.","'Button' is defined but never used.","'navClient' is assigned a value but never used.","'Form' is defined but never used.","'Modal' is defined but never used.","'SetGoal_2' is defined but never used.","no-dupe-keys","Duplicate key 'marginBottom'.","ObjectExpression","unexpected","no-global-assign","no-unsafe-negation"]