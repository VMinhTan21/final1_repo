[{"/home/minhtan/Documents/robotservices/src/index.js":"1","/home/minhtan/Documents/robotservices/src/reportWebVitals.js":"2","/home/minhtan/Documents/robotservices/src/App.js":"3","/home/minhtan/Documents/robotservices/src/components/Header.jsx":"4","/home/minhtan/Documents/robotservices/src/components/Body.jsx":"5","/home/minhtan/Documents/robotservices/src/components/Home.jsx":"6","/home/minhtan/Documents/robotservices/src/components/TestDataBase.jsx":"7","/home/minhtan/Documents/robotservices/src/components/About.jsx":"8","/home/minhtan/Documents/robotservices/src/components/Order.jsx":"9","/home/minhtan/Documents/robotservices/src/components/Drink.jsx":"10","/home/minhtan/Documents/robotservices/src/components/Connection.jsx":"11","/home/minhtan/Documents/robotservices/src/components/RobotState.jsx":"12","/home/minhtan/Documents/robotservices/src/components/Map.jsx":"13","/home/minhtan/Documents/robotservices/src/components/Teleoperation.jsx":"14","/home/minhtan/Documents/robotservices/src/components/SetGoal_1.jsx":"15","/home/minhtan/Documents/robotservices/src/components/SetGoal_2.jsx":"16","/home/minhtan/Documents/robotservices/src/components/HomeNavbar.jsx":"17","/home/minhtan/Documents/robotservices/src/components/ViewOrder.jsx":"18","/home/minhtan/Documents/robotservices/src/scripts/config.js":"19","/home/minhtan/Documents/robotservices/src/components/OrderDetail.jsx":"20","/home/minhtan/Documents/robotservices/src/components/OrderSuccess.jsx":"21","/home/minhtan/Documents/robotservices/src/components/CurrentOrder.jsx":"22","/home/minhtan/Documents/robotservices/src/components/SetGoal_3.jsx":"23","/home/minhtan/Documents/robotservices/src/components/SetGoal_4.jsx":"24","/home/minhtan/Documents/robotservices/src/components/SetGoal_5.jsx":"25","/home/minhtan/Documents/robotservices/src/socket.js":"26"},{"size":660,"mtime":1687185290000,"results":"27","hashOfConfig":"28"},{"size":362,"mtime":1687020422000,"results":"29","hashOfConfig":"28"},{"size":328,"mtime":1689260462621,"results":"30","hashOfConfig":"28"},{"size":813,"mtime":1687591994317,"results":"31","hashOfConfig":"28"},{"size":1075,"mtime":1690697050846,"results":"32","hashOfConfig":"28"},{"size":6519,"mtime":1690906774062,"results":"33","hashOfConfig":"28"},{"size":961,"mtime":1690101353694,"results":"34","hashOfConfig":"28"},{"size":324,"mtime":1687020422000,"results":"35","hashOfConfig":"28"},{"size":8913,"mtime":1690697361955,"results":"36","hashOfConfig":"28"},{"size":1451,"mtime":1687595278106,"results":"37","hashOfConfig":"28"},{"size":1901,"mtime":1690022947477,"results":"38","hashOfConfig":"28"},{"size":4369,"mtime":1690388849250,"results":"39","hashOfConfig":"28"},{"size":3515,"mtime":1690651803707,"results":"40","hashOfConfig":"28"},{"size":3149,"mtime":1687678413804,"results":"41","hashOfConfig":"28"},{"size":2873,"mtime":1690022929069,"results":"42","hashOfConfig":"28"},{"size":2814,"mtime":1690906814043,"results":"43","hashOfConfig":"28"},{"size":1001,"mtime":1690024330560,"results":"44","hashOfConfig":"28"},{"size":2908,"mtime":1690697971946,"results":"45","hashOfConfig":"28"},{"size":304,"mtime":1690819662291,"results":"46","hashOfConfig":"28"},{"size":1901,"mtime":1690101706824,"results":"47","hashOfConfig":"28"},{"size":1301,"mtime":1690698328481,"results":"48","hashOfConfig":"28"},{"size":4493,"mtime":1690818988550,"results":"49","hashOfConfig":"28"},{"size":2786,"mtime":1690906823059,"results":"50","hashOfConfig":"28"},{"size":2899,"mtime":1690906828071,"results":"51","hashOfConfig":"28"},{"size":2903,"mtime":1690906831923,"results":"52","hashOfConfig":"28"},{"size":105,"mtime":1688573722973,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"wg1h7d",{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"56"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"56"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"56"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"56"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"56"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"56"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"56"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"/home/minhtan/Documents/robotservices/src/index.js",[],["116","117"],"/home/minhtan/Documents/robotservices/src/reportWebVitals.js",[],"/home/minhtan/Documents/robotservices/src/App.js",["118","119","120","121"],"import Header from \"./components/Header\";\nimport Body from \"./components/Body\";\n\nimport React, { useState, useEffect } from \"react\";\nimport { socket } from \"./socket\";\nimport io from 'socket.io-client'\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Body></Body>\n    </div>\n  );\n}\n\n","/home/minhtan/Documents/robotservices/src/components/Header.jsx",["122","123","124"],"import React, { Component } from \"react\";\nimport { Container, Navbar, Nav } from \"react-bootstrap\";\nclass Header extends Component {\n  render() {\n    return (\n      // <Container>\n      //   <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" collapseOnSelect>\n      //     <Navbar.Brand href=\"#home\">React ROS Robot</Navbar.Brand>\n      //     <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      //     <Navbar.Collapse id=\"basic-navbar-nav\">\n      //       <Nav className=\"mr-auto\">\n      //         <Nav.Link href=\"/\">Home</Nav.Link>\n      //         <Nav.Link href=\"/about\">About</Nav.Link>\n      //         <Nav.Link href=\"/testDataBase\">Database</Nav.Link>\n      //       </Nav>\n      //     </Navbar.Collapse>\n      //   </Navbar>\n      // </Container>\n      <div></div>\n    );\n  }\n}\n\nexport default Header;\n","/home/minhtan/Documents/robotservices/src/components/Body.jsx",[],"/home/minhtan/Documents/robotservices/src/components/Home.jsx",["125","126","127","128","129","130","131","132","133","134"],"/home/minhtan/Documents/robotservices/src/components/TestDataBase.jsx",[],"/home/minhtan/Documents/robotservices/src/components/About.jsx",[],"/home/minhtan/Documents/robotservices/src/components/Order.jsx",["135","136","137"],"import React, { useEffect, useState } from \"react\";\nimport { Row, Col, Container, Button, Form, Table } from \"react-bootstrap\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport { Link, useParams } from \"react-router-dom\"\nimport { useHistory } from \"react-router-dom\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport axios from \"axios\";\n\nimport io from \"socket.io-client\"\n\nconst Order = (req, res) => {\n\n  //const socket = io.connect('http://localhost:4000')\n  //const socket = io.connect('http://socket-sv.vercel.app')\n  const socket = io(\"https://socket-robot-sv.onrender.com/\", {\n    transports: ['websocket'],\n  })\n\n  const { Table } = useParams()\n\n  console.log(typeof Table)\n\n  const history = useHistory();\n  const defaultOrder = {\n    Date: new Date().toLocaleDateString(\"en-GB\"),\n    StaffID: \"Staff-01\",\n    Table: Table,\n    Status: \"Pending\",\n    OrderList: [],\n    Note: \"\",\n    Total: 0,\n  };\n\n  const [order, setOrder] = useState(defaultOrder);\n  const defaultOrderDetail = { Drink: null, Price: 0, Qty: \"\" };\n  const [orderDetails, setOrderDetails] = useState([defaultOrderDetail]);\n  const [drinks, setDrinks] = useState([]);\n\n  useEffect(() => {\n    fetchDrinks();\n  }, []);\n\n  useEffect(() => {\n    calculateTotalPrice();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [orderDetails]);\n\n  const btnAddRow_onclick = () => {\n    setOrderDetails([...orderDetails, defaultOrderDetail]);\n  };\n\n  const fetchDrinks = async () => {\n    try {\n      const response = await axios.get(\"https://db-api-5yux.onrender.com/drink\");\n      const data = response.data;\n      setDrinks(data);\n    } catch (error) {\n      console.log(\"Error fetching drinks:\", error);\n    }\n  };\n\n  const calculateTotalPrice = () => {\n    let total = 0;\n    orderDetails.forEach((detail) => {\n      const price = parseInt(detail.Price, 10);\n      const qty = parseInt(detail.Qty, 10);\n      total += price * qty;\n    });\n\n    if (isNaN(total)) total = 0;\n\n    setOrder({ ...order, Total: total });\n  };\n\n  const handleDrinkChange = (event, index) => {\n    const value = event.target.value;\n\n    const drink = drinks.find((d) => d._id === value);\n\n    const updatedOrderDetails = [...orderDetails];\n    updatedOrderDetails[index] = {\n      ...updatedOrderDetails[index],\n      Drink: value,\n      Price: drink ? drink.DrinkPrice : 0,\n    };\n    setOrderDetails(updatedOrderDetails);\n  };\n\n  const handleQtyChange = (event, index) => {\n    const { value } = event.target;\n    const numericValue = value.replace(/[^0-9]/g, \"\"); // Filter out non-numeric characters\n    const updatedOrderDetails = [...orderDetails];\n    updatedOrderDetails[index].Qty = numericValue;\n    setOrderDetails(updatedOrderDetails);\n  };\n\n  const handleNotesChange = (event) => {\n    const { value } = event.target;\n    setOrder({ ...order, Note: value });\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      // Create order details\n      const detailIds = [];\n\n      for (const detail of orderDetails) {\n        if (detail.Drink && detail.Price && detail.Qty) {\n          const orderDetailsResponse = await axios.post(\n            \"https://db-api-5yux.onrender.com/orderDetail\",\n            detail\n          );\n\n          detailIds.push(orderDetailsResponse.data._id);\n          console.log(\n            \"New order detail created:\",\n            orderDetailsResponse.statusText\n          );\n        }\n      }\n\n      // Create order\n      const updatedOrder = { ...order, OrderList: detailIds };\n      const orderResponse = await axios.post(\n        \"https://db-api-5yux.onrender.com/order\",\n        updatedOrder\n      );\n\n      // Navigation and toast\n      if (orderResponse.status === 201) {\n        // const channel = new BroadcastChannel(\"6B29FC40-CA47-1067-B31D-00DD010662DA\");\n        // channel.postMessage(\"Tạo Order thành công!\");\n\n        socket.emit('NEW_ORDER', { table: Table })\n\n        history.push(`/orderSuccess/${Table}`)\n      } else {\n        console.log(orderResponse.status);\n      }\n    } catch (error) {\n      console.log(\"Error creating new order and order details:\", error);\n    }\n  };\n\n  return (\n    <div style={{\n      backgroundColor: \"#EFFFFF\"\n    }}>\n      <Row>\n        <Col>\n          <h5 style={{\n            margin: \"10px 15px\",\n            fontWeight: \"bold\"\n          }}>\n            COFFEE ROS ROBOT - ORDER FORM\n          </h5>\n        </Col>\n      </Row>\n      <Form >\n        <Container>\n          <Row\n            style={{\n              fontSize: '100%'\n            }}\n            className=\"justify-content-md-center\">\n            <Col style={{ border: \"1px solid\" }}>\n              <Form.Group>\n                <Table striped hover responsive size=\"md\">\n                  <thead>\n                    <tr>\n                      <th>#</th>\n                      <th className=\"text-center\">Drinks</th>\n                      <th className=\"text-center\">Price</th>\n                      <th className=\"text-center\">Quantity</th>\n                    </tr>\n                  </thead>\n                  <tbody id=\"orderDetails_table\">\n                    {orderDetails.map((detail, index) => (\n                      <tr key={index}>\n                        <td style={{ fontWeight: 'bold', width: '5%' }}>\n                          {index + 1}\n                        </td>\n                        <td style={{\n                          width: '45%'\n                        }}>\n                          <select\n                            className=\"table-select\"\n                            onChange={(event) =>\n                              handleDrinkChange(event, index)\n                            }\n                          >\n                            <option key={0} value={0}>\n                              Select\n                            </option>\n                            {drinks.map((drink, index) => (\n                              <option key={index + 1} value={drink._id}>\n                                {drink.DrinkName}\n                              </option>\n                            ))}\n                          </select>\n                        </td>\n                        <td style={{ width: \"25%\" }}>\n                          <Form.Control\n                            type=\"text\"\n                            value={detail.Price}\n                            readOnly\n                          ></Form.Control>\n                        </td>\n                        <td style={{ width: '25%' }}>\n                          <Form.Control\n                            //className=\"text-center\"\n                            type=\"number\"\n                            step=\"1\"\n                            max=\"5\"\n                            class=\"quantity-field border-0 text-center\"\n                            value={detail.Qty}\n                            onChange={(event) => handleQtyChange(event, index)}\n                          ></Form.Control>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </Table>\n\n              </Form.Group>\n            </Col>\n          </Row>\n          <Row style={{ border: \"1px solid\", borderTop: \"none\", borderBottom: \"none\" }}>\n            <Col style={{\n              fontSize: '100%',\n              fontWeight: 'bold'\n            }}>\n              <p style={{\n                marginTop: \"2%\"\n              }}>\n                Total: {order.Total} Đ\n              </p>\n            </Col>\n          </Row>\n          <Row style={{ border: \"1px solid\", borderTop: \"none\", borderBottom: \"none\" }}>\n            <Col>\n              <Form.Group>\n                <Button\n                  variant=\"info\" size=\"sm\"\n                  type=\"button\" onClick={btnAddRow_onclick}>\n                  <span>+</span> Add\n                </Button>\n              </Form.Group>\n            </Col>\n          </Row>\n          <Row style={{ border: \"1px solid\", borderTop: \"none\", borderBottom: \"none\" }}>\n            <Col>\n              <Form.Group>\n                <Form.Label style={{ fontWeight: \"bold\" }}>Note</Form.Label>\n                <Form.Control\n                  as=\"textarea\"\n                  value={order.Note}\n                  rows={3}\n                  onChange={(event) => handleNotesChange(event)}\n                />\n              </Form.Group>\n            </Col>\n          </Row>\n          <Row style={{ border: \"1px solid\", borderTop: \"none\" }}>\n            <Col>\n              <Form.Group className=\"d-flex justify-content-center\">\n                <Button\n                  variant=\"success\" size=\"sm\"\n                  type=\"submit\" onClick={(event) => handleSubmit(event)}>\n                  Order\n                </Button>\n              </Form.Group>\n            </Col>\n          </Row>\n        </Container>\n      </Form>\n      <ToastContainer />\n    </div>\n  );\n};\n\nexport default Order;\n","/home/minhtan/Documents/robotservices/src/components/Drink.jsx",[],"/home/minhtan/Documents/robotservices/src/components/Connection.jsx",["138"],"import React, { Component } from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Config from \"../scripts/config\";\nclass Connection extends Component {\n  state = { connected: false, ros: null };\n\n  constructor() {\n    super();\n    this.init_connection();\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(this.state.ros);\n\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"connection established!\");\n      this.setState({ connected: true });\n    });\n\n    this.state.ros.on(\"close\", () => {\n      console.log(\"connection is closed!\");\n      this.setState({ connected: false });\n      //try to reconnect every 3 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\n            \"ws://\" +\n              Config.ROSBRIDGE_SERVER_IP +\n              \":\" +\n              Config.ROSBRIDGE_SERVER_PORT +\n              \"\"\n          );\n        } catch (error) {\n          console.log(\"connection problem \");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n    } catch (error) {\n      console.log(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n      console.log(\"connection problem \");\n    }\n  }\n\n  render() {\n    return (\n      <div style={\n        {\n          marginTop: \"10%\",\n          position: \"relative\",\n          float: \"right\",\n          width: \"100%\"\n        }\n      }>\n        <Alert\n          className=\"text-center\"\n          variant={this.state.connected ? \"success\" : \"danger\"}\n        >\n          {this.state.connected ? \"Robot Connected\" : \"Robot Disconnected\"}\n        </Alert>\n      </div>\n    );\n  }\n}\n\nexport default Connection;\n","/home/minhtan/Documents/robotservices/src/components/RobotState.jsx",["139","140","141","142","143","144","145"],"import React, { Component } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { Row, Col, Container, Button } from \"react-bootstrap\";\nimport Config from \"../scripts/config\";\nimport * as Three from \"three\";\n\nimport { toast } from \"react-toastify\"\nimport io from \"socket.io-client\"\n\nclass RobotState extends Component {\n  state = {\n    ros: null,\n    x: 0,\n    y: 0,\n    orientation: 0,\n    linear_velocity: 0,\n    angular_velocity: 0,\n  };\n\n  constructor() {\n    super();\n    this.init_connection();\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(this.state.ros);\n\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"connection established in Teleoperation Component!\");\n      console.log(this.state.ros);\n      this.setState({ connected: true });\n    });\n\n    this.state.ros.on(\"close\", () => {\n      console.log(\"connection is closed!\");\n      this.setState({ connected: false });\n      //try to reconnect every 3 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\n            \"ws://\" +\n            Config.ROSBRIDGE_SERVER_IP +\n            \":\" +\n            Config.ROSBRIDGE_SERVER_PORT +\n            \"\"\n          );\n        } catch (error) {\n          console.log(\"connection problem \");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n        Config.ROSBRIDGE_SERVER_IP +\n        \":\" +\n        Config.ROSBRIDGE_SERVER_PORT +\n        \"\"\n      );\n    } catch (error) {\n      console.log(\n        \"ws://\" +\n        Config.ROSBRIDGE_SERVER_IP +\n        \":\" +\n        Config.ROSBRIDGE_SERVER_PORT +\n        \"\"\n      );\n      console.log(\"connection problem \");\n    }\n  }\n\n  componentDidMount() {\n    this.getRobotState();\n    this.getState()\n  }\n\n  getRobotState() {\n    //create a pose subscriber\n    var pose_subscriber = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: Config.POSE_TOPIC,\n      messageType: \"geometry_msgs/PoseWithCovarianceStamped\",\n    });\n\n    //create a pose callback\n    pose_subscriber.subscribe((message) => {\n      this.setState({ x: message.pose.pose.position.x.toFixed(2) });\n      this.setState({ y: message.pose.pose.position.y.toFixed(2) });\n      this.setState({\n        orientation: this.getOrientationFromQuaternion(\n          message.pose.pose.orientation\n        ).toFixed(2),\n      });\n    });\n\n    //create a subscriber for the velocities in the odom topic\n    var velocity_subscriber = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: Config.ODOM_TOPIC,\n      messageType: \"nav_msgs/Odometry\",\n    });\n\n    //callback function for the odom\n    velocity_subscriber.subscribe((message) => {\n      this.setState({\n        linear_velocity: message.twist.twist.linear.x.toFixed(2),\n      });\n      this.setState({\n        angular_velocity: message.twist.twist.angular.z.toFixed(2),\n      });\n    });\n  }\n\n  getOrientationFromQuaternion(ros_orientation_quaternion) {\n    var q = new Three.Quaternion(\n      ros_orientation_quaternion.x,\n      ros_orientation_quaternion.y,\n      ros_orientation_quaternion.z,\n      ros_orientation_quaternion.w\n    );\n    //convert this quaternion into Roll, Pitch and Yaw\n    var RPY = new Three.Euler().setFromQuaternion(q);\n\n    return RPY[\"_z\"] * (180 / Math.PI);\n  }\n\n  getState() {\n\n    const socket = io(\"https://socket-robot-sv.onrender.com/\", {\n      transports: ['websocket'],\n    })\n\n    var status = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: 'move_base/result',\n      messageType: \"move_base_msgs/MoveBaseActionResult\"\n    })\n\n    status.subscribe((message) => {\n      console.log(message)\n      toast.success(\"GOAL REACHED\", {\n        position: toast.POSITION.TOP_CENTER\n      })\n\n      socket.emit('GOAL_REACHED')\n    })\n\n\n  }\n\n  render() {\n    return (\n      <div>\n        {/* <h4>Position</h4>\n        <p className=\"mt-0\">x: {this.state.x}</p>\n        <p className=\"mt-0\">y: {this.state.y}</p>\n        <p className=\"mt-0\">Orientation: {this.state.orientation}</p>\n\n        <h4 className=\"mt-4\">Velocities</h4>\n        <p className=\"mt-0\">\n          Linear Velocity: {this.state.linear_velocity}\n        </p>\n        <p className=\"mt-0\">\n          Angular Velocity: {this.state.angular_velocity}\n        </p>  */}\n      </div>\n    );\n  }\n}\n\nexport default RobotState;\n","/home/minhtan/Documents/robotservices/src/components/Map.jsx",["146","147"],"import React, { Component } from \"react\";\nimport Config from \"../scripts/config\";\n\nclass Map extends Component {\n  state = {\n    ros: null,\n  };\n\n  constructor() {\n    super();\n    //this.init_connection = this.view_map.bind(this);\n    this.init_connection()\n    this.view_map = this.view_map.bind(this);\n  }\n\n  \n\n  init_connection() {\n    //this.setState({ ros: new ROSLIB.Ros() });\n    this.state.ros = new window.ROSLIB.Ros();\n    this.state.ros.on('connection', (e) => {\n      console.log(e)\n      this.setState({\n          ros: this.state.ros\n      })\n  })\n    console.log(\"Map:\" + this.state.ros);\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n    } catch (error) {\n      console.log(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n      console.log(\"cannot connect to the WS robot. Try again after 1 second\");\n    }\n  }\n\n  componentDidMount() {\n    this.init_connection();\n    console.log(\"Map: componentDidMount\" + this.state.ros);\n    this.view_map();\n  }\n\n  view_map() {\n    var viewer = new window.ROS2D.Viewer({\n      divID: \"nav_div\",\n      width: 650,\n      height: 450,\n    });\n    var navClient = new window.NAV2D.OccupancyGridClientNav({\n      ros: this.state.ros,\n      rootObject: viewer.scene,\n      viewer: viewer,\n      serverName: \"/move_base\",\n      withOrientation: true,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div id=\"nav_div\" style={{\n          position: \"relative\",\n          float: \"left\",\n          marginBottom: \"2vh\"\n        }}></div>\n      </div>\n    );\n  }\n}\n\nexport default Map;\n\n\n// import React, { useState, useEffect } from \"react\";\n// import Config from \"../scripts/config\";\n\n// const Map = () => {\n//   const [ros, setRos] = useState(null);\n\n//   const initConnection = () => {\n//     const newRos = new window.ROSLIB.Ros();\n//     newRos.on('connection', () => {\n//       console.log(\"Connected to ROS\");\n//       setRos(newRos);\n//     });\n//     console.log(\"Map: \", newRos);\n//     try {\n//       newRos.connect(\n//         \"ws://\" +\n//           Config.ROSBRIDGE_SERVER_IP +\n//           \":\" +\n//           Config.ROSBRIDGE_SERVER_PORT\n//       );\n//     } catch (error) {\n//       console.log(\n//         \"ws://\" +\n//           Config.ROSBRIDGE_SERVER_IP +\n//           \":\" +\n//           Config.ROSBRIDGE_SERVER_PORT\n//       );\n//       console.log(\n//         \"Cannot connect to the WS robot. Try again after 1 second.\"\n//       );\n//     }\n//   };\n\n//   useEffect(() => {\n//     initConnection();\n//   }, []);\n\n//   const viewMap = () => {\n//     if (!ros) {\n//       console.log(\"ROS connection not established.\");\n//       return;\n//     }\n\n//     var viewer = new window.ROS2D.Viewer({\n//       divID: \"nav_div\",\n//       width: 650,\n//       height: 450,\n//     });\n\n//     var navClient = new window.NAV2D.OccupancyGridClientNav({\n//       ros: ros,\n//       rootObject: viewer.scene,\n//       viewer: viewer,\n//       serverName: \"/move_base\",\n//       withOrientation: true,\n//     });\n//   };\n\n//   useEffect(() => {\n//     viewMap();\n//   }, [ros]);\n\n//   return (\n//     <div>\n//       <div\n//         id=\"nav_div\"\n//         style={{\n//           position: \"relative\",\n//           float: \"left\",\n//           marginBottom: \"2vh\",\n//         }}\n//       ></div>\n//     </div>\n//   );\n// };\n\n// export default Map;\n","/home/minhtan/Documents/robotservices/src/components/Teleoperation.jsx",["148"],"import React, { Component } from \"react\";\nimport { Joystick } from \"react-joystick-component\";\nimport Config from \"../scripts/config\";\n\nclass Teleoperation extends Component {\n  state = { ros: null };\n\n  constructor() {\n    super();\n    this.init_connection();\n\n    this.handleMove = this.handleMove.bind(this);\n    this.handleStop = this.handleStop.bind(this);\n  }\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(this.state.ros);\n\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"connection established in Teleoperation Component!\");\n      console.log(this.state.ros);\n      this.setState({ connected: true });\n    });\n\n    this.state.ros.on(\"close\", () => {\n      console.log(\"connection is closed!\");\n      this.setState({ connected: false });\n      //try to reconnect every 3 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\n            \"ws://\" +\n              Config.ROSBRIDGE_SERVER_IP +\n              \":\" +\n              Config.ROSBRIDGE_SERVER_PORT +\n              \"\"\n          );\n        } catch (error) {\n          console.log(\"connection problem \");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n    } catch (error) {\n      console.log(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n      console.log(\"connection problem \");\n    }\n  }\n\n  handleMove(event) {\n    console.log(\"handle move\");\n    //we need to create a ROS publisher on the topic cmd_vel\n    var cmd_vel = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: Config.CMD_VEL_TOPIC,\n      messageType: \"geometry_msgs/Twist\",\n    });\n    //we need to create a twist message to be to published to rosbridge\n    var twist = new window.ROSLIB.Message({\n      linear: {\n        x: event.y / 50,\n        y: 0,\n        z: 0,\n      },\n      angular: {\n        x: 0,\n        y: 0,\n        z: -event.x / 50,\n      },\n    });\n    //we need to publish the message on the cmd_vel topic\n    cmd_vel.publish(twist);\n  }\n  handleStop(event) {\n    console.log(\"handle stop\");\n    //we need to create a ROS publisher on the topic cmd_vel\n    var cmd_vel = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: Config.CMD_VEL_TOPIC,\n      messageType: \"geometry_msgs/Twist\",\n    });\n    //we need to create a twist message to be to published to rosbridge\n    var twist = new window.ROSLIB.Message({\n      linear: {\n        x: 0,\n        y: 0,\n        z: 0,\n      },\n      angular: {\n        x: 0,\n        y: 0,\n        z: 0,\n      },\n    });\n    //we need to publish the message on the cmd_vel topic\n    cmd_vel.publish(twist);\n  }\n\n  render() {\n    return (\n      <div>\n        <Joystick\n          size={100}\n          baseColor=\"#EEEEEE\"\n          stickColor=\"#BBBBBB\"\n          move={this.handleMove}\n          stop={this.handleStop}\n        ></Joystick>\n      </div>\n    );\n  }\n}\n\nexport default Teleoperation;\n","/home/minhtan/Documents/robotservices/src/components/SetGoal_1.jsx",["149"],"import React, { Component } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { toast } from \"react-toastify\";\n\nimport Config from \"../scripts/config\";\n\nclass SetGoal_1 extends Component {\n    state = { ros: null }\n\n    constructor() {\n        super()\n\n        this.init_connection()\n\n        this.sendCommand = this.sendCommand.bind(this)\n    }\n\n    init_connection() {\n        this.state.ros = new window.ROSLIB.Ros()\n        this.state.ros.on('connection', (e) => {\n            console.log(e)\n            this.setState({\n                ros: this.state.ros\n            })\n        })\n        try {\n            console.log('connect')\n            this.state.ros.connect(\n                \"ws://\" +\n                Config.ROSBRIDGE_SERVER_IP +\n                \":\" +\n                Config.ROSBRIDGE_SERVER_PORT +\n                \"\"\n            )\n\n\n            console.log(\"SetGoal_1 - Connected\")\n        } catch (error) {\n            console.log(\n                \"ws://\" +\n                Config.ROSBRIDGE_SERVER_IP +\n                \":\" +\n                Config.ROSBRIDGE_SERVER_PORT +\n                \"\"\n            )\n            console.log(\"SetGoal_1 - cannot connect to the WS robot. Try again after 1 second\");\n        }\n    }\n\n    sendCommand(event) {\n        console.log(\"SetGoal_1 sent command\")\n        console.log(this.state.ros)\n\n        const goal = new window.ROSLIB.Goal({\n            actionClient: new window.ROSLIB.ActionClient({\n                ros: this.state.ros,\n                serverName: '/move_base',\n                actionName: 'move_base_msgs/MoveBaseAction'\n            }),\n            goalMessage: {\n                target_pose: {\n                    header: {\n                        frame_id: 'map'  // Replace with the desired frame ID\n                    },\n                    pose: {\n                        position: {\n                            x: 0.0,  // Replace with the desired position\n                            y: 0.0,\n                            z: 0.0\n                        },\n                        orientation: {\n                            x: 0.0,\n                            y: 0.0,\n                            z: 0.0,\n                            w: 1.0\n                        }\n                    }\n                }\n            }\n        });\n\n        goal.send();\n        console.log('Returning ...');\n\n        toast.success('ROBOT IS RETURNING', {\n            position: toast.POSITION.TOP_RIGHT\n        })\n    }\n\n    render() {\n        return (\n            <div style={{\n                marginTop: \"10%\"\n            }}>\n                <Button onClick={this.sendCommand} variant=\"info\"\n                    style={\n                        { width: \"100%\" }\n                    }>\n                    ROBOT RETURN\n                </Button>\n            </div>\n        )\n    }\n}\n\nexport default SetGoal_1\n","/home/minhtan/Documents/robotservices/src/components/SetGoal_2.jsx",["150"],"/home/minhtan/Documents/robotservices/src/components/HomeNavbar.jsx",[],"/home/minhtan/Documents/robotservices/src/components/ViewOrder.jsx",[],"/home/minhtan/Documents/robotservices/src/scripts/config.js",[],"/home/minhtan/Documents/robotservices/src/components/OrderDetail.jsx",[],"/home/minhtan/Documents/robotservices/src/components/OrderSuccess.jsx",[],"/home/minhtan/Documents/robotservices/src/components/CurrentOrder.jsx",["151","152","153","154"],"import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { Card, Table } from \"react-bootstrap\";\nimport io from 'socket.io-client'\n\nconst CurrentOrder = (props) => {\n    const [drinks, setDrinks] = useState([]);\n    const [orders, setOrders] = useState([]);\n\n    const [orderDetails, setOrderDetails] = useState([]);\n\n    useEffect(() => {\n        fetchDrinks();\n    }, []);\n\n    useEffect(() => {\n        fetchOrders();\n    }, []);\n\n    const fetchDrinks = async () => {\n        try {\n            const response = await axios.get(\"https://db-api-5yux.onrender.com/drink\");\n            const data = response.data;\n            setDrinks(data);\n        } catch (error) {\n            console.log(\"Error fetching drinks:\", error);\n        }\n    };\n\n    const fetchOrders = async () => {\n        const details = []\n\n        try {\n            // const response = axios.get(\"https://db-api-5yux.onrender.com/order\")\n            // let length = response.data.length\n            // let index = 0\n\n            // for(let i = 0; i < length ; i++) {\n            //     if (response.data[i].Status == \"Pending\") {\n            //         index = i\n            //         break\n            //     }\n            // }\n \n            const data = props.data\n            //const data = response.data[index]\n            setOrders(data)\n            console.log(\"Got data\")\n            console.log(data)\n\n            const orderList = data.OrderList\n            console.log(\"orderList\")\n            console.log(orderList)\n\n            for (let detailId of orderList) {\n                const res = await axios.get(`https://db-api-5yux.onrender.com/orderDetail/${detailId}`)\n                const dataDetails = res.data\n                console.log(dataDetails)\n                details.push(dataDetails)\n            }\n\n            console.log(details)\n\n            setOrderDetails(details)\n        } catch (error) {\n            console.log(\"Error fetching orders:\", error);\n        }\n    };\n\n    const cusStyle = {\n        position: \"relative\",\n        float: \"right\"\n    }\n\n    // style={{marginTop: \"3%\", right: \"3%\"}}\n\n    return (\n        <div style={{\n            position: \"relative\",\n            left: \"50%\",\n            transform: \"translateX(-50%)\"\n        }}>\n            <Card text=\"primary\" style={{ marginTop: \"7%\", marginBottom: \"5%\", backgroundColor: \"#FFB244\" }}>\n                <Card.Body>\n                    <h5 style={{\n                        marginTop: \"3%\",\n                        marginBottom: \"5%\"\n                    }}>{orders.Table}</h5>\n                    <h6 style={{\n                        marginBottom: \"0\",\n                        marginTop: \"3%\",\n                        marginBottom: \"2%\"\n                    }}>List drinks of order</h6>\n                    <Table striped borderless hover responsive size=\"md\" style={{ border: \"1px solid\" }}>\n                        <thead>\n                            <tr>\n                                <th><h6>#</h6></th>\n                                <th><h6>Drink</h6></th>\n                                <th><h6>Price</h6></th>\n                                <th><h6>Qty</h6></th>\n                            </tr>\n                        </thead>\n                        <tbody id=\"orders_table\">\n                            {orderDetails.map((order, index) => {\n                                const drink = drinks.find((d) => d._id === order.Drink)\n                                return (\n                                    <tr key={order._id}>\n                                        <td><h6>{index + 1}</h6></td>\n                                        <td><h6>{drink ? drink.DrinkName : \"\"}</h6></td>\n                                        <td><h6>{drink ? drink.DrinkPrice : 0}</h6></td>\n                                        <td><h6>{order.Qty}</h6></td>\n                                    </tr>\n                                )\n                            })}\n                            <tr>\n                                <td colSpan={2}><h6>Note: {orders.Note}</h6></td>\n                                <td colSpan={2}><h6>Total: {orders.Total}</h6></td>\n                            </tr>\n                            {/* <tr>\n                        <Button variant=\"success\">DELIVER</Button>\n                    </tr> */}\n                        </tbody>\n                    </Table>\n                </Card.Body>\n            </Card>\n        </div>\n    )\n}\n\nexport default CurrentOrder","/home/minhtan/Documents/robotservices/src/components/SetGoal_3.jsx",["155","156","157","158"],"/home/minhtan/Documents/robotservices/src/components/SetGoal_4.jsx",["159"],"/home/minhtan/Documents/robotservices/src/components/SetGoal_5.jsx",["160"],"/home/minhtan/Documents/robotservices/src/socket.js",[],{"ruleId":"161","replacedBy":"162"},{"ruleId":"163","replacedBy":"164"},{"ruleId":"165","severity":1,"message":"166","line":4,"column":17,"nodeType":"167","messageId":"168","endLine":4,"endColumn":25},{"ruleId":"165","severity":1,"message":"169","line":4,"column":27,"nodeType":"167","messageId":"168","endLine":4,"endColumn":36},{"ruleId":"165","severity":1,"message":"170","line":5,"column":10,"nodeType":"167","messageId":"168","endLine":5,"endColumn":16},{"ruleId":"165","severity":1,"message":"171","line":6,"column":8,"nodeType":"167","messageId":"168","endLine":6,"endColumn":10},{"ruleId":"165","severity":1,"message":"172","line":2,"column":10,"nodeType":"167","messageId":"168","endLine":2,"endColumn":19},{"ruleId":"165","severity":1,"message":"173","line":2,"column":21,"nodeType":"167","messageId":"168","endLine":2,"endColumn":27},{"ruleId":"165","severity":1,"message":"174","line":2,"column":29,"nodeType":"167","messageId":"168","endLine":2,"endColumn":32},{"ruleId":"165","severity":1,"message":"166","line":18,"column":10,"nodeType":"167","messageId":"168","endLine":18,"endColumn":18},{"ruleId":"165","severity":1,"message":"169","line":18,"column":20,"nodeType":"167","messageId":"168","endLine":18,"endColumn":29},{"ruleId":"175","severity":1,"message":"176","line":72,"column":39,"nodeType":"177","messageId":"178","endLine":72,"endColumn":41},{"ruleId":"165","severity":1,"message":"179","line":108,"column":11,"nodeType":"167","messageId":"168","endLine":108,"endColumn":17},{"ruleId":"175","severity":1,"message":"176","line":116,"column":39,"nodeType":"177","messageId":"178","endLine":116,"endColumn":41},{"ruleId":"180","severity":1,"message":"181","line":161,"column":27,"nodeType":"182","messageId":"183","endLine":161,"endColumn":40},{"ruleId":"180","severity":1,"message":"184","line":164,"column":27,"nodeType":"182","messageId":"183","endLine":164,"endColumn":40},{"ruleId":"180","severity":1,"message":"185","line":167,"column":27,"nodeType":"182","messageId":"183","endLine":167,"endColumn":40},{"ruleId":"180","severity":1,"message":"186","line":170,"column":27,"nodeType":"182","messageId":"183","endLine":170,"endColumn":40},{"ruleId":"180","severity":1,"message":"187","line":175,"column":27,"nodeType":"182","messageId":"183","endLine":175,"endColumn":40},{"ruleId":"165","severity":1,"message":"188","line":2,"column":45,"nodeType":"167","messageId":"168","endLine":2,"endColumn":50},{"ruleId":"165","severity":1,"message":"189","line":3,"column":26,"nodeType":"167","messageId":"168","endLine":3,"endColumn":31},{"ruleId":"165","severity":1,"message":"190","line":4,"column":10,"nodeType":"167","messageId":"168","endLine":4,"endColumn":14},{"ruleId":"191","severity":1,"message":"192","line":13,"column":5,"nodeType":"193","messageId":"194","endLine":13,"endColumn":15},{"ruleId":"165","severity":1,"message":"169","line":2,"column":10,"nodeType":"167","messageId":"168","endLine":2,"endColumn":19},{"ruleId":"165","severity":1,"message":"166","line":2,"column":21,"nodeType":"167","messageId":"168","endLine":2,"endColumn":29},{"ruleId":"165","severity":1,"message":"195","line":3,"column":10,"nodeType":"167","messageId":"168","endLine":3,"endColumn":13},{"ruleId":"165","severity":1,"message":"196","line":3,"column":15,"nodeType":"167","messageId":"168","endLine":3,"endColumn":18},{"ruleId":"165","severity":1,"message":"172","line":3,"column":20,"nodeType":"167","messageId":"168","endLine":3,"endColumn":29},{"ruleId":"165","severity":1,"message":"197","line":3,"column":31,"nodeType":"167","messageId":"168","endLine":3,"endColumn":37},{"ruleId":"191","severity":1,"message":"192","line":26,"column":5,"nodeType":"193","messageId":"194","endLine":26,"endColumn":15},{"ruleId":"191","severity":1,"message":"192","line":20,"column":5,"nodeType":"193","messageId":"194","endLine":20,"endColumn":15},{"ruleId":"165","severity":1,"message":"198","line":60,"column":9,"nodeType":"167","messageId":"168","endLine":60,"endColumn":18},{"ruleId":"191","severity":1,"message":"192","line":16,"column":5,"nodeType":"193","messageId":"194","endLine":16,"endColumn":15},{"ruleId":"191","severity":1,"message":"192","line":19,"column":9,"nodeType":"193","messageId":"194","endLine":19,"endColumn":19},{"ruleId":"191","severity":1,"message":"192","line":21,"column":9,"nodeType":"193","messageId":"194","endLine":21,"endColumn":19},{"ruleId":"165","severity":1,"message":"171","line":4,"column":8,"nodeType":"167","messageId":"168","endLine":4,"endColumn":10},{"ruleId":"199","severity":1,"message":"200","line":18,"column":8,"nodeType":"201","endLine":18,"endColumn":10,"suggestions":"202"},{"ruleId":"165","severity":1,"message":"203","line":70,"column":11,"nodeType":"167","messageId":"168","endLine":70,"endColumn":19},{"ruleId":"204","severity":1,"message":"205","line":92,"column":25,"nodeType":"206","messageId":"178","endLine":92,"endColumn":37},{"ruleId":"165","severity":1,"message":"195","line":2,"column":10,"nodeType":"167","messageId":"168","endLine":2,"endColumn":13},{"ruleId":"165","severity":1,"message":"196","line":2,"column":15,"nodeType":"167","messageId":"168","endLine":2,"endColumn":18},{"ruleId":"165","severity":1,"message":"172","line":2,"column":20,"nodeType":"167","messageId":"168","endLine":2,"endColumn":29},{"ruleId":"191","severity":1,"message":"192","line":19,"column":9,"nodeType":"193","messageId":"194","endLine":19,"endColumn":19},{"ruleId":"191","severity":1,"message":"192","line":19,"column":9,"nodeType":"193","messageId":"194","endLine":19,"endColumn":19},{"ruleId":"191","severity":1,"message":"192","line":19,"column":9,"nodeType":"193","messageId":"194","endLine":19,"endColumn":19},"no-native-reassign",["207"],"no-negated-in-lhs",["208"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'socket' is defined but never used.","'io' is defined but never used.","'Container' is defined but never used.","'Navbar' is defined but never used.","'Nav' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'update' is assigned a value but never used.","react/jsx-pascal-case","Imported JSX component SetGoal_2 must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","Imported JSX component SetGoal_3 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component SetGoal_4 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component SetGoal_5 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component SetGoal_1 must be in PascalCase or SCREAMING_SNAKE_CASE","'Table' is defined but never used.","'toast' is defined but never used.","'Link' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","noDirectMutation","'Row' is defined but never used.","'Col' is defined but never used.","'Button' is defined but never used.","'navClient' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchOrders'. Either include it or remove the dependency array.","ArrayExpression",["209"],"'cusStyle' is assigned a value but never used.","no-dupe-keys","Duplicate key 'marginBottom'.","ObjectExpression","no-global-assign","no-unsafe-negation",{"desc":"210","fix":"211"},"Update the dependencies array to be: [fetchOrders]",{"range":"212","text":"213"},[457,459],"[fetchOrders]"]